// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	common "github.com/multycloud/multy/api/proto/common"
	resources "github.com/multycloud/multy/api/proto/resources"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MultyResourceServiceClient is the client API for MultyResourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultyResourceServiceClient interface {
	CreateSubnet(ctx context.Context, in *resources.CreateSubnetRequest, opts ...grpc.CallOption) (*resources.SubnetResource, error)
	ReadSubnet(ctx context.Context, in *resources.ReadSubnetRequest, opts ...grpc.CallOption) (*resources.SubnetResource, error)
	UpdateSubnet(ctx context.Context, in *resources.UpdateSubnetRequest, opts ...grpc.CallOption) (*resources.SubnetResource, error)
	DeleteSubnet(ctx context.Context, in *resources.DeleteSubnetRequest, opts ...grpc.CallOption) (*common.Empty, error)
	CreateVirtualNetwork(ctx context.Context, in *resources.CreateVirtualNetworkRequest, opts ...grpc.CallOption) (*resources.VirtualNetworkResource, error)
	ReadVirtualNetwork(ctx context.Context, in *resources.ReadVirtualNetworkRequest, opts ...grpc.CallOption) (*resources.VirtualNetworkResource, error)
	UpdateVirtualNetwork(ctx context.Context, in *resources.UpdateVirtualNetworkRequest, opts ...grpc.CallOption) (*resources.VirtualNetworkResource, error)
	DeleteVirtualNetwork(ctx context.Context, in *resources.DeleteVirtualNetworkRequest, opts ...grpc.CallOption) (*common.Empty, error)
	CreateNetworkInterface(ctx context.Context, in *resources.CreateNetworkInterfaceRequest, opts ...grpc.CallOption) (*resources.NetworkInterfaceResource, error)
	ReadNetworkInterface(ctx context.Context, in *resources.ReadNetworkInterfaceRequest, opts ...grpc.CallOption) (*resources.NetworkInterfaceResource, error)
	UpdateNetworkInterface(ctx context.Context, in *resources.UpdateNetworkInterfaceRequest, opts ...grpc.CallOption) (*resources.NetworkInterfaceResource, error)
	DeleteNetworkInterface(ctx context.Context, in *resources.DeleteNetworkInterfaceRequest, opts ...grpc.CallOption) (*common.Empty, error)
	CreateRouteTable(ctx context.Context, in *resources.CreateRouteTableRequest, opts ...grpc.CallOption) (*resources.RouteTableResource, error)
	ReadRouteTable(ctx context.Context, in *resources.ReadRouteTableRequest, opts ...grpc.CallOption) (*resources.RouteTableResource, error)
	UpdateRouteTable(ctx context.Context, in *resources.UpdateRouteTableRequest, opts ...grpc.CallOption) (*resources.RouteTableResource, error)
	DeleteRouteTable(ctx context.Context, in *resources.DeleteRouteTableRequest, opts ...grpc.CallOption) (*common.Empty, error)
	CreateRouteTableAssociation(ctx context.Context, in *resources.CreateRouteTableAssociationRequest, opts ...grpc.CallOption) (*resources.RouteTableAssociationResource, error)
	ReadRouteTableAssociation(ctx context.Context, in *resources.ReadRouteTableAssociationRequest, opts ...grpc.CallOption) (*resources.RouteTableAssociationResource, error)
	UpdateRouteTableAssociation(ctx context.Context, in *resources.UpdateRouteTableAssociationRequest, opts ...grpc.CallOption) (*resources.RouteTableAssociationResource, error)
	DeleteRouteTableAssociation(ctx context.Context, in *resources.DeleteRouteTableAssociationRequest, opts ...grpc.CallOption) (*common.Empty, error)
	CreateNetworkSecurityGroup(ctx context.Context, in *resources.CreateNetworkSecurityGroupRequest, opts ...grpc.CallOption) (*resources.NetworkSecurityGroupResource, error)
	ReadNetworkSecurityGroup(ctx context.Context, in *resources.ReadNetworkSecurityGroupRequest, opts ...grpc.CallOption) (*resources.NetworkSecurityGroupResource, error)
	UpdateNetworkSecurityGroup(ctx context.Context, in *resources.UpdateNetworkSecurityGroupRequest, opts ...grpc.CallOption) (*resources.NetworkSecurityGroupResource, error)
	DeleteNetworkSecurityGroup(ctx context.Context, in *resources.DeleteNetworkSecurityGroupRequest, opts ...grpc.CallOption) (*common.Empty, error)
	CreateDatabase(ctx context.Context, in *resources.CreateDatabaseRequest, opts ...grpc.CallOption) (*resources.DatabaseResource, error)
	ReadDatabase(ctx context.Context, in *resources.ReadDatabaseRequest, opts ...grpc.CallOption) (*resources.DatabaseResource, error)
	UpdateDatabase(ctx context.Context, in *resources.UpdateDatabaseRequest, opts ...grpc.CallOption) (*resources.DatabaseResource, error)
	DeleteDatabase(ctx context.Context, in *resources.DeleteDatabaseRequest, opts ...grpc.CallOption) (*common.Empty, error)
	CreateObjectStorage(ctx context.Context, in *resources.CreateObjectStorageRequest, opts ...grpc.CallOption) (*resources.ObjectStorageResource, error)
	ReadObjectStorage(ctx context.Context, in *resources.ReadObjectStorageRequest, opts ...grpc.CallOption) (*resources.ObjectStorageResource, error)
	UpdateObjectStorage(ctx context.Context, in *resources.UpdateObjectStorageRequest, opts ...grpc.CallOption) (*resources.ObjectStorageResource, error)
	DeleteObjectStorage(ctx context.Context, in *resources.DeleteObjectStorageRequest, opts ...grpc.CallOption) (*common.Empty, error)
	CreateObjectStorageObject(ctx context.Context, in *resources.CreateObjectStorageObjectRequest, opts ...grpc.CallOption) (*resources.ObjectStorageObjectResource, error)
	ReadObjectStorageObject(ctx context.Context, in *resources.ReadObjectStorageObjectRequest, opts ...grpc.CallOption) (*resources.ObjectStorageObjectResource, error)
	UpdateObjectStorageObject(ctx context.Context, in *resources.UpdateObjectStorageObjectRequest, opts ...grpc.CallOption) (*resources.ObjectStorageObjectResource, error)
	DeleteObjectStorageObject(ctx context.Context, in *resources.DeleteObjectStorageObjectRequest, opts ...grpc.CallOption) (*common.Empty, error)
	CreatePublicIp(ctx context.Context, in *resources.CreatePublicIpRequest, opts ...grpc.CallOption) (*resources.PublicIpResource, error)
	ReadPublicIp(ctx context.Context, in *resources.ReadPublicIpRequest, opts ...grpc.CallOption) (*resources.PublicIpResource, error)
	UpdatePublicIp(ctx context.Context, in *resources.UpdatePublicIpRequest, opts ...grpc.CallOption) (*resources.PublicIpResource, error)
	DeletePublicIp(ctx context.Context, in *resources.DeletePublicIpRequest, opts ...grpc.CallOption) (*common.Empty, error)
	CreateKubernetesCluster(ctx context.Context, in *resources.CreateKubernetesClusterRequest, opts ...grpc.CallOption) (*resources.KubernetesClusterResource, error)
	ReadKubernetesCluster(ctx context.Context, in *resources.ReadKubernetesClusterRequest, opts ...grpc.CallOption) (*resources.KubernetesClusterResource, error)
	UpdateKubernetesCluster(ctx context.Context, in *resources.UpdateKubernetesClusterRequest, opts ...grpc.CallOption) (*resources.KubernetesClusterResource, error)
	DeleteKubernetesCluster(ctx context.Context, in *resources.DeleteKubernetesClusterRequest, opts ...grpc.CallOption) (*common.Empty, error)
	CreateKubernetesNodePool(ctx context.Context, in *resources.CreateKubernetesNodePoolRequest, opts ...grpc.CallOption) (*resources.KubernetesNodePoolResource, error)
	ReadKubernetesNodePool(ctx context.Context, in *resources.ReadKubernetesNodePoolRequest, opts ...grpc.CallOption) (*resources.KubernetesNodePoolResource, error)
	UpdateKubernetesNodePool(ctx context.Context, in *resources.UpdateKubernetesNodePoolRequest, opts ...grpc.CallOption) (*resources.KubernetesNodePoolResource, error)
	DeleteKubernetesNodePool(ctx context.Context, in *resources.DeleteKubernetesNodePoolRequest, opts ...grpc.CallOption) (*common.Empty, error)
	CreateLambda(ctx context.Context, in *resources.CreateLambdaRequest, opts ...grpc.CallOption) (*resources.LambdaResource, error)
	ReadLambda(ctx context.Context, in *resources.ReadLambdaRequest, opts ...grpc.CallOption) (*resources.LambdaResource, error)
	UpdateLambda(ctx context.Context, in *resources.UpdateLambdaRequest, opts ...grpc.CallOption) (*resources.LambdaResource, error)
	DeleteLambda(ctx context.Context, in *resources.DeleteLambdaRequest, opts ...grpc.CallOption) (*common.Empty, error)
	CreateVault(ctx context.Context, in *resources.CreateVaultRequest, opts ...grpc.CallOption) (*resources.VaultResource, error)
	ReadVault(ctx context.Context, in *resources.ReadVaultRequest, opts ...grpc.CallOption) (*resources.VaultResource, error)
	UpdateVault(ctx context.Context, in *resources.UpdateVaultRequest, opts ...grpc.CallOption) (*resources.VaultResource, error)
	DeleteVault(ctx context.Context, in *resources.DeleteVaultRequest, opts ...grpc.CallOption) (*common.Empty, error)
	CreateVaultAccessPolicy(ctx context.Context, in *resources.CreateVaultAccessPolicyRequest, opts ...grpc.CallOption) (*resources.VaultAccessPolicyResource, error)
	ReadVaultAccessPolicy(ctx context.Context, in *resources.ReadVaultAccessPolicyRequest, opts ...grpc.CallOption) (*resources.VaultAccessPolicyResource, error)
	UpdateVaultAccessPolicy(ctx context.Context, in *resources.UpdateVaultAccessPolicyRequest, opts ...grpc.CallOption) (*resources.VaultAccessPolicyResource, error)
	DeleteVaultAccessPolicy(ctx context.Context, in *resources.DeleteVaultAccessPolicyRequest, opts ...grpc.CallOption) (*common.Empty, error)
	CreateVaultSecret(ctx context.Context, in *resources.CreateVaultSecretRequest, opts ...grpc.CallOption) (*resources.VaultSecretResource, error)
	ReadVaultSecret(ctx context.Context, in *resources.ReadVaultSecretRequest, opts ...grpc.CallOption) (*resources.VaultSecretResource, error)
	UpdateVaultSecret(ctx context.Context, in *resources.UpdateVaultSecretRequest, opts ...grpc.CallOption) (*resources.VaultSecretResource, error)
	DeleteVaultSecret(ctx context.Context, in *resources.DeleteVaultSecretRequest, opts ...grpc.CallOption) (*common.Empty, error)
	CreateVirtualMachine(ctx context.Context, in *resources.CreateVirtualMachineRequest, opts ...grpc.CallOption) (*resources.VirtualMachineResource, error)
	ReadVirtualMachine(ctx context.Context, in *resources.ReadVirtualMachineRequest, opts ...grpc.CallOption) (*resources.VirtualMachineResource, error)
	UpdateVirtualMachine(ctx context.Context, in *resources.UpdateVirtualMachineRequest, opts ...grpc.CallOption) (*resources.VirtualMachineResource, error)
	DeleteVirtualMachine(ctx context.Context, in *resources.DeleteVirtualMachineRequest, opts ...grpc.CallOption) (*common.Empty, error)
}

type multyResourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMultyResourceServiceClient(cc grpc.ClientConnInterface) MultyResourceServiceClient {
	return &multyResourceServiceClient{cc}
}

func (c *multyResourceServiceClient) CreateSubnet(ctx context.Context, in *resources.CreateSubnetRequest, opts ...grpc.CallOption) (*resources.SubnetResource, error) {
	out := new(resources.SubnetResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadSubnet(ctx context.Context, in *resources.ReadSubnetRequest, opts ...grpc.CallOption) (*resources.SubnetResource, error) {
	out := new(resources.SubnetResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateSubnet(ctx context.Context, in *resources.UpdateSubnetRequest, opts ...grpc.CallOption) (*resources.SubnetResource, error) {
	out := new(resources.SubnetResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteSubnet(ctx context.Context, in *resources.DeleteSubnetRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateVirtualNetwork(ctx context.Context, in *resources.CreateVirtualNetworkRequest, opts ...grpc.CallOption) (*resources.VirtualNetworkResource, error) {
	out := new(resources.VirtualNetworkResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateVirtualNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadVirtualNetwork(ctx context.Context, in *resources.ReadVirtualNetworkRequest, opts ...grpc.CallOption) (*resources.VirtualNetworkResource, error) {
	out := new(resources.VirtualNetworkResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadVirtualNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateVirtualNetwork(ctx context.Context, in *resources.UpdateVirtualNetworkRequest, opts ...grpc.CallOption) (*resources.VirtualNetworkResource, error) {
	out := new(resources.VirtualNetworkResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateVirtualNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteVirtualNetwork(ctx context.Context, in *resources.DeleteVirtualNetworkRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteVirtualNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateNetworkInterface(ctx context.Context, in *resources.CreateNetworkInterfaceRequest, opts ...grpc.CallOption) (*resources.NetworkInterfaceResource, error) {
	out := new(resources.NetworkInterfaceResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateNetworkInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadNetworkInterface(ctx context.Context, in *resources.ReadNetworkInterfaceRequest, opts ...grpc.CallOption) (*resources.NetworkInterfaceResource, error) {
	out := new(resources.NetworkInterfaceResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadNetworkInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateNetworkInterface(ctx context.Context, in *resources.UpdateNetworkInterfaceRequest, opts ...grpc.CallOption) (*resources.NetworkInterfaceResource, error) {
	out := new(resources.NetworkInterfaceResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateNetworkInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteNetworkInterface(ctx context.Context, in *resources.DeleteNetworkInterfaceRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteNetworkInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateRouteTable(ctx context.Context, in *resources.CreateRouteTableRequest, opts ...grpc.CallOption) (*resources.RouteTableResource, error) {
	out := new(resources.RouteTableResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateRouteTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadRouteTable(ctx context.Context, in *resources.ReadRouteTableRequest, opts ...grpc.CallOption) (*resources.RouteTableResource, error) {
	out := new(resources.RouteTableResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadRouteTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateRouteTable(ctx context.Context, in *resources.UpdateRouteTableRequest, opts ...grpc.CallOption) (*resources.RouteTableResource, error) {
	out := new(resources.RouteTableResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateRouteTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteRouteTable(ctx context.Context, in *resources.DeleteRouteTableRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteRouteTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateRouteTableAssociation(ctx context.Context, in *resources.CreateRouteTableAssociationRequest, opts ...grpc.CallOption) (*resources.RouteTableAssociationResource, error) {
	out := new(resources.RouteTableAssociationResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateRouteTableAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadRouteTableAssociation(ctx context.Context, in *resources.ReadRouteTableAssociationRequest, opts ...grpc.CallOption) (*resources.RouteTableAssociationResource, error) {
	out := new(resources.RouteTableAssociationResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadRouteTableAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateRouteTableAssociation(ctx context.Context, in *resources.UpdateRouteTableAssociationRequest, opts ...grpc.CallOption) (*resources.RouteTableAssociationResource, error) {
	out := new(resources.RouteTableAssociationResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateRouteTableAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteRouteTableAssociation(ctx context.Context, in *resources.DeleteRouteTableAssociationRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteRouteTableAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateNetworkSecurityGroup(ctx context.Context, in *resources.CreateNetworkSecurityGroupRequest, opts ...grpc.CallOption) (*resources.NetworkSecurityGroupResource, error) {
	out := new(resources.NetworkSecurityGroupResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateNetworkSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadNetworkSecurityGroup(ctx context.Context, in *resources.ReadNetworkSecurityGroupRequest, opts ...grpc.CallOption) (*resources.NetworkSecurityGroupResource, error) {
	out := new(resources.NetworkSecurityGroupResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadNetworkSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateNetworkSecurityGroup(ctx context.Context, in *resources.UpdateNetworkSecurityGroupRequest, opts ...grpc.CallOption) (*resources.NetworkSecurityGroupResource, error) {
	out := new(resources.NetworkSecurityGroupResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateNetworkSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteNetworkSecurityGroup(ctx context.Context, in *resources.DeleteNetworkSecurityGroupRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteNetworkSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateDatabase(ctx context.Context, in *resources.CreateDatabaseRequest, opts ...grpc.CallOption) (*resources.DatabaseResource, error) {
	out := new(resources.DatabaseResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadDatabase(ctx context.Context, in *resources.ReadDatabaseRequest, opts ...grpc.CallOption) (*resources.DatabaseResource, error) {
	out := new(resources.DatabaseResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateDatabase(ctx context.Context, in *resources.UpdateDatabaseRequest, opts ...grpc.CallOption) (*resources.DatabaseResource, error) {
	out := new(resources.DatabaseResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteDatabase(ctx context.Context, in *resources.DeleteDatabaseRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateObjectStorage(ctx context.Context, in *resources.CreateObjectStorageRequest, opts ...grpc.CallOption) (*resources.ObjectStorageResource, error) {
	out := new(resources.ObjectStorageResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateObjectStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadObjectStorage(ctx context.Context, in *resources.ReadObjectStorageRequest, opts ...grpc.CallOption) (*resources.ObjectStorageResource, error) {
	out := new(resources.ObjectStorageResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadObjectStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateObjectStorage(ctx context.Context, in *resources.UpdateObjectStorageRequest, opts ...grpc.CallOption) (*resources.ObjectStorageResource, error) {
	out := new(resources.ObjectStorageResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateObjectStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteObjectStorage(ctx context.Context, in *resources.DeleteObjectStorageRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteObjectStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateObjectStorageObject(ctx context.Context, in *resources.CreateObjectStorageObjectRequest, opts ...grpc.CallOption) (*resources.ObjectStorageObjectResource, error) {
	out := new(resources.ObjectStorageObjectResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateObjectStorageObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadObjectStorageObject(ctx context.Context, in *resources.ReadObjectStorageObjectRequest, opts ...grpc.CallOption) (*resources.ObjectStorageObjectResource, error) {
	out := new(resources.ObjectStorageObjectResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadObjectStorageObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateObjectStorageObject(ctx context.Context, in *resources.UpdateObjectStorageObjectRequest, opts ...grpc.CallOption) (*resources.ObjectStorageObjectResource, error) {
	out := new(resources.ObjectStorageObjectResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateObjectStorageObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteObjectStorageObject(ctx context.Context, in *resources.DeleteObjectStorageObjectRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteObjectStorageObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreatePublicIp(ctx context.Context, in *resources.CreatePublicIpRequest, opts ...grpc.CallOption) (*resources.PublicIpResource, error) {
	out := new(resources.PublicIpResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreatePublicIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadPublicIp(ctx context.Context, in *resources.ReadPublicIpRequest, opts ...grpc.CallOption) (*resources.PublicIpResource, error) {
	out := new(resources.PublicIpResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadPublicIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdatePublicIp(ctx context.Context, in *resources.UpdatePublicIpRequest, opts ...grpc.CallOption) (*resources.PublicIpResource, error) {
	out := new(resources.PublicIpResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdatePublicIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeletePublicIp(ctx context.Context, in *resources.DeletePublicIpRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeletePublicIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateKubernetesCluster(ctx context.Context, in *resources.CreateKubernetesClusterRequest, opts ...grpc.CallOption) (*resources.KubernetesClusterResource, error) {
	out := new(resources.KubernetesClusterResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateKubernetesCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadKubernetesCluster(ctx context.Context, in *resources.ReadKubernetesClusterRequest, opts ...grpc.CallOption) (*resources.KubernetesClusterResource, error) {
	out := new(resources.KubernetesClusterResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadKubernetesCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateKubernetesCluster(ctx context.Context, in *resources.UpdateKubernetesClusterRequest, opts ...grpc.CallOption) (*resources.KubernetesClusterResource, error) {
	out := new(resources.KubernetesClusterResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateKubernetesCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteKubernetesCluster(ctx context.Context, in *resources.DeleteKubernetesClusterRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteKubernetesCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateKubernetesNodePool(ctx context.Context, in *resources.CreateKubernetesNodePoolRequest, opts ...grpc.CallOption) (*resources.KubernetesNodePoolResource, error) {
	out := new(resources.KubernetesNodePoolResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateKubernetesNodePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadKubernetesNodePool(ctx context.Context, in *resources.ReadKubernetesNodePoolRequest, opts ...grpc.CallOption) (*resources.KubernetesNodePoolResource, error) {
	out := new(resources.KubernetesNodePoolResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadKubernetesNodePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateKubernetesNodePool(ctx context.Context, in *resources.UpdateKubernetesNodePoolRequest, opts ...grpc.CallOption) (*resources.KubernetesNodePoolResource, error) {
	out := new(resources.KubernetesNodePoolResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateKubernetesNodePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteKubernetesNodePool(ctx context.Context, in *resources.DeleteKubernetesNodePoolRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteKubernetesNodePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateLambda(ctx context.Context, in *resources.CreateLambdaRequest, opts ...grpc.CallOption) (*resources.LambdaResource, error) {
	out := new(resources.LambdaResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateLambda", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadLambda(ctx context.Context, in *resources.ReadLambdaRequest, opts ...grpc.CallOption) (*resources.LambdaResource, error) {
	out := new(resources.LambdaResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadLambda", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateLambda(ctx context.Context, in *resources.UpdateLambdaRequest, opts ...grpc.CallOption) (*resources.LambdaResource, error) {
	out := new(resources.LambdaResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateLambda", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteLambda(ctx context.Context, in *resources.DeleteLambdaRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteLambda", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateVault(ctx context.Context, in *resources.CreateVaultRequest, opts ...grpc.CallOption) (*resources.VaultResource, error) {
	out := new(resources.VaultResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateVault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadVault(ctx context.Context, in *resources.ReadVaultRequest, opts ...grpc.CallOption) (*resources.VaultResource, error) {
	out := new(resources.VaultResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadVault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateVault(ctx context.Context, in *resources.UpdateVaultRequest, opts ...grpc.CallOption) (*resources.VaultResource, error) {
	out := new(resources.VaultResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateVault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteVault(ctx context.Context, in *resources.DeleteVaultRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteVault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateVaultAccessPolicy(ctx context.Context, in *resources.CreateVaultAccessPolicyRequest, opts ...grpc.CallOption) (*resources.VaultAccessPolicyResource, error) {
	out := new(resources.VaultAccessPolicyResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateVaultAccessPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadVaultAccessPolicy(ctx context.Context, in *resources.ReadVaultAccessPolicyRequest, opts ...grpc.CallOption) (*resources.VaultAccessPolicyResource, error) {
	out := new(resources.VaultAccessPolicyResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadVaultAccessPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateVaultAccessPolicy(ctx context.Context, in *resources.UpdateVaultAccessPolicyRequest, opts ...grpc.CallOption) (*resources.VaultAccessPolicyResource, error) {
	out := new(resources.VaultAccessPolicyResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateVaultAccessPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteVaultAccessPolicy(ctx context.Context, in *resources.DeleteVaultAccessPolicyRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteVaultAccessPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateVaultSecret(ctx context.Context, in *resources.CreateVaultSecretRequest, opts ...grpc.CallOption) (*resources.VaultSecretResource, error) {
	out := new(resources.VaultSecretResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateVaultSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadVaultSecret(ctx context.Context, in *resources.ReadVaultSecretRequest, opts ...grpc.CallOption) (*resources.VaultSecretResource, error) {
	out := new(resources.VaultSecretResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadVaultSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateVaultSecret(ctx context.Context, in *resources.UpdateVaultSecretRequest, opts ...grpc.CallOption) (*resources.VaultSecretResource, error) {
	out := new(resources.VaultSecretResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateVaultSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteVaultSecret(ctx context.Context, in *resources.DeleteVaultSecretRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteVaultSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateVirtualMachine(ctx context.Context, in *resources.CreateVirtualMachineRequest, opts ...grpc.CallOption) (*resources.VirtualMachineResource, error) {
	out := new(resources.VirtualMachineResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadVirtualMachine(ctx context.Context, in *resources.ReadVirtualMachineRequest, opts ...grpc.CallOption) (*resources.VirtualMachineResource, error) {
	out := new(resources.VirtualMachineResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateVirtualMachine(ctx context.Context, in *resources.UpdateVirtualMachineRequest, opts ...grpc.CallOption) (*resources.VirtualMachineResource, error) {
	out := new(resources.VirtualMachineResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteVirtualMachine(ctx context.Context, in *resources.DeleteVirtualMachineRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MultyResourceServiceServer is the server API for MultyResourceService service.
// All implementations must embed UnimplementedMultyResourceServiceServer
// for forward compatibility
type MultyResourceServiceServer interface {
	CreateSubnet(context.Context, *resources.CreateSubnetRequest) (*resources.SubnetResource, error)
	ReadSubnet(context.Context, *resources.ReadSubnetRequest) (*resources.SubnetResource, error)
	UpdateSubnet(context.Context, *resources.UpdateSubnetRequest) (*resources.SubnetResource, error)
	DeleteSubnet(context.Context, *resources.DeleteSubnetRequest) (*common.Empty, error)
	CreateVirtualNetwork(context.Context, *resources.CreateVirtualNetworkRequest) (*resources.VirtualNetworkResource, error)
	ReadVirtualNetwork(context.Context, *resources.ReadVirtualNetworkRequest) (*resources.VirtualNetworkResource, error)
	UpdateVirtualNetwork(context.Context, *resources.UpdateVirtualNetworkRequest) (*resources.VirtualNetworkResource, error)
	DeleteVirtualNetwork(context.Context, *resources.DeleteVirtualNetworkRequest) (*common.Empty, error)
	CreateNetworkInterface(context.Context, *resources.CreateNetworkInterfaceRequest) (*resources.NetworkInterfaceResource, error)
	ReadNetworkInterface(context.Context, *resources.ReadNetworkInterfaceRequest) (*resources.NetworkInterfaceResource, error)
	UpdateNetworkInterface(context.Context, *resources.UpdateNetworkInterfaceRequest) (*resources.NetworkInterfaceResource, error)
	DeleteNetworkInterface(context.Context, *resources.DeleteNetworkInterfaceRequest) (*common.Empty, error)
	CreateRouteTable(context.Context, *resources.CreateRouteTableRequest) (*resources.RouteTableResource, error)
	ReadRouteTable(context.Context, *resources.ReadRouteTableRequest) (*resources.RouteTableResource, error)
	UpdateRouteTable(context.Context, *resources.UpdateRouteTableRequest) (*resources.RouteTableResource, error)
	DeleteRouteTable(context.Context, *resources.DeleteRouteTableRequest) (*common.Empty, error)
	CreateRouteTableAssociation(context.Context, *resources.CreateRouteTableAssociationRequest) (*resources.RouteTableAssociationResource, error)
	ReadRouteTableAssociation(context.Context, *resources.ReadRouteTableAssociationRequest) (*resources.RouteTableAssociationResource, error)
	UpdateRouteTableAssociation(context.Context, *resources.UpdateRouteTableAssociationRequest) (*resources.RouteTableAssociationResource, error)
	DeleteRouteTableAssociation(context.Context, *resources.DeleteRouteTableAssociationRequest) (*common.Empty, error)
	CreateNetworkSecurityGroup(context.Context, *resources.CreateNetworkSecurityGroupRequest) (*resources.NetworkSecurityGroupResource, error)
	ReadNetworkSecurityGroup(context.Context, *resources.ReadNetworkSecurityGroupRequest) (*resources.NetworkSecurityGroupResource, error)
	UpdateNetworkSecurityGroup(context.Context, *resources.UpdateNetworkSecurityGroupRequest) (*resources.NetworkSecurityGroupResource, error)
	DeleteNetworkSecurityGroup(context.Context, *resources.DeleteNetworkSecurityGroupRequest) (*common.Empty, error)
	CreateDatabase(context.Context, *resources.CreateDatabaseRequest) (*resources.DatabaseResource, error)
	ReadDatabase(context.Context, *resources.ReadDatabaseRequest) (*resources.DatabaseResource, error)
	UpdateDatabase(context.Context, *resources.UpdateDatabaseRequest) (*resources.DatabaseResource, error)
	DeleteDatabase(context.Context, *resources.DeleteDatabaseRequest) (*common.Empty, error)
	CreateObjectStorage(context.Context, *resources.CreateObjectStorageRequest) (*resources.ObjectStorageResource, error)
	ReadObjectStorage(context.Context, *resources.ReadObjectStorageRequest) (*resources.ObjectStorageResource, error)
	UpdateObjectStorage(context.Context, *resources.UpdateObjectStorageRequest) (*resources.ObjectStorageResource, error)
	DeleteObjectStorage(context.Context, *resources.DeleteObjectStorageRequest) (*common.Empty, error)
	CreateObjectStorageObject(context.Context, *resources.CreateObjectStorageObjectRequest) (*resources.ObjectStorageObjectResource, error)
	ReadObjectStorageObject(context.Context, *resources.ReadObjectStorageObjectRequest) (*resources.ObjectStorageObjectResource, error)
	UpdateObjectStorageObject(context.Context, *resources.UpdateObjectStorageObjectRequest) (*resources.ObjectStorageObjectResource, error)
	DeleteObjectStorageObject(context.Context, *resources.DeleteObjectStorageObjectRequest) (*common.Empty, error)
	CreatePublicIp(context.Context, *resources.CreatePublicIpRequest) (*resources.PublicIpResource, error)
	ReadPublicIp(context.Context, *resources.ReadPublicIpRequest) (*resources.PublicIpResource, error)
	UpdatePublicIp(context.Context, *resources.UpdatePublicIpRequest) (*resources.PublicIpResource, error)
	DeletePublicIp(context.Context, *resources.DeletePublicIpRequest) (*common.Empty, error)
	CreateKubernetesCluster(context.Context, *resources.CreateKubernetesClusterRequest) (*resources.KubernetesClusterResource, error)
	ReadKubernetesCluster(context.Context, *resources.ReadKubernetesClusterRequest) (*resources.KubernetesClusterResource, error)
	UpdateKubernetesCluster(context.Context, *resources.UpdateKubernetesClusterRequest) (*resources.KubernetesClusterResource, error)
	DeleteKubernetesCluster(context.Context, *resources.DeleteKubernetesClusterRequest) (*common.Empty, error)
	CreateKubernetesNodePool(context.Context, *resources.CreateKubernetesNodePoolRequest) (*resources.KubernetesNodePoolResource, error)
	ReadKubernetesNodePool(context.Context, *resources.ReadKubernetesNodePoolRequest) (*resources.KubernetesNodePoolResource, error)
	UpdateKubernetesNodePool(context.Context, *resources.UpdateKubernetesNodePoolRequest) (*resources.KubernetesNodePoolResource, error)
	DeleteKubernetesNodePool(context.Context, *resources.DeleteKubernetesNodePoolRequest) (*common.Empty, error)
	CreateLambda(context.Context, *resources.CreateLambdaRequest) (*resources.LambdaResource, error)
	ReadLambda(context.Context, *resources.ReadLambdaRequest) (*resources.LambdaResource, error)
	UpdateLambda(context.Context, *resources.UpdateLambdaRequest) (*resources.LambdaResource, error)
	DeleteLambda(context.Context, *resources.DeleteLambdaRequest) (*common.Empty, error)
	CreateVault(context.Context, *resources.CreateVaultRequest) (*resources.VaultResource, error)
	ReadVault(context.Context, *resources.ReadVaultRequest) (*resources.VaultResource, error)
	UpdateVault(context.Context, *resources.UpdateVaultRequest) (*resources.VaultResource, error)
	DeleteVault(context.Context, *resources.DeleteVaultRequest) (*common.Empty, error)
	CreateVaultAccessPolicy(context.Context, *resources.CreateVaultAccessPolicyRequest) (*resources.VaultAccessPolicyResource, error)
	ReadVaultAccessPolicy(context.Context, *resources.ReadVaultAccessPolicyRequest) (*resources.VaultAccessPolicyResource, error)
	UpdateVaultAccessPolicy(context.Context, *resources.UpdateVaultAccessPolicyRequest) (*resources.VaultAccessPolicyResource, error)
	DeleteVaultAccessPolicy(context.Context, *resources.DeleteVaultAccessPolicyRequest) (*common.Empty, error)
	CreateVaultSecret(context.Context, *resources.CreateVaultSecretRequest) (*resources.VaultSecretResource, error)
	ReadVaultSecret(context.Context, *resources.ReadVaultSecretRequest) (*resources.VaultSecretResource, error)
	UpdateVaultSecret(context.Context, *resources.UpdateVaultSecretRequest) (*resources.VaultSecretResource, error)
	DeleteVaultSecret(context.Context, *resources.DeleteVaultSecretRequest) (*common.Empty, error)
	CreateVirtualMachine(context.Context, *resources.CreateVirtualMachineRequest) (*resources.VirtualMachineResource, error)
	ReadVirtualMachine(context.Context, *resources.ReadVirtualMachineRequest) (*resources.VirtualMachineResource, error)
	UpdateVirtualMachine(context.Context, *resources.UpdateVirtualMachineRequest) (*resources.VirtualMachineResource, error)
	DeleteVirtualMachine(context.Context, *resources.DeleteVirtualMachineRequest) (*common.Empty, error)
	mustEmbedUnimplementedMultyResourceServiceServer()
}

// UnimplementedMultyResourceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMultyResourceServiceServer struct {
}

func (UnimplementedMultyResourceServiceServer) CreateSubnet(context.Context, *resources.CreateSubnetRequest) (*resources.SubnetResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubnet not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadSubnet(context.Context, *resources.ReadSubnetRequest) (*resources.SubnetResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSubnet not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateSubnet(context.Context, *resources.UpdateSubnetRequest) (*resources.SubnetResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubnet not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteSubnet(context.Context, *resources.DeleteSubnetRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubnet not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateVirtualNetwork(context.Context, *resources.CreateVirtualNetworkRequest) (*resources.VirtualNetworkResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVirtualNetwork not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadVirtualNetwork(context.Context, *resources.ReadVirtualNetworkRequest) (*resources.VirtualNetworkResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadVirtualNetwork not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateVirtualNetwork(context.Context, *resources.UpdateVirtualNetworkRequest) (*resources.VirtualNetworkResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVirtualNetwork not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteVirtualNetwork(context.Context, *resources.DeleteVirtualNetworkRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVirtualNetwork not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateNetworkInterface(context.Context, *resources.CreateNetworkInterfaceRequest) (*resources.NetworkInterfaceResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetworkInterface not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadNetworkInterface(context.Context, *resources.ReadNetworkInterfaceRequest) (*resources.NetworkInterfaceResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadNetworkInterface not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateNetworkInterface(context.Context, *resources.UpdateNetworkInterfaceRequest) (*resources.NetworkInterfaceResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNetworkInterface not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteNetworkInterface(context.Context, *resources.DeleteNetworkInterfaceRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetworkInterface not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateRouteTable(context.Context, *resources.CreateRouteTableRequest) (*resources.RouteTableResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRouteTable not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadRouteTable(context.Context, *resources.ReadRouteTableRequest) (*resources.RouteTableResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadRouteTable not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateRouteTable(context.Context, *resources.UpdateRouteTableRequest) (*resources.RouteTableResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRouteTable not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteRouteTable(context.Context, *resources.DeleteRouteTableRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRouteTable not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateRouteTableAssociation(context.Context, *resources.CreateRouteTableAssociationRequest) (*resources.RouteTableAssociationResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRouteTableAssociation not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadRouteTableAssociation(context.Context, *resources.ReadRouteTableAssociationRequest) (*resources.RouteTableAssociationResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadRouteTableAssociation not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateRouteTableAssociation(context.Context, *resources.UpdateRouteTableAssociationRequest) (*resources.RouteTableAssociationResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRouteTableAssociation not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteRouteTableAssociation(context.Context, *resources.DeleteRouteTableAssociationRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRouteTableAssociation not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateNetworkSecurityGroup(context.Context, *resources.CreateNetworkSecurityGroupRequest) (*resources.NetworkSecurityGroupResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetworkSecurityGroup not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadNetworkSecurityGroup(context.Context, *resources.ReadNetworkSecurityGroupRequest) (*resources.NetworkSecurityGroupResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadNetworkSecurityGroup not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateNetworkSecurityGroup(context.Context, *resources.UpdateNetworkSecurityGroupRequest) (*resources.NetworkSecurityGroupResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNetworkSecurityGroup not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteNetworkSecurityGroup(context.Context, *resources.DeleteNetworkSecurityGroupRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetworkSecurityGroup not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateDatabase(context.Context, *resources.CreateDatabaseRequest) (*resources.DatabaseResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatabase not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadDatabase(context.Context, *resources.ReadDatabaseRequest) (*resources.DatabaseResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDatabase not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateDatabase(context.Context, *resources.UpdateDatabaseRequest) (*resources.DatabaseResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatabase not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteDatabase(context.Context, *resources.DeleteDatabaseRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatabase not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateObjectStorage(context.Context, *resources.CreateObjectStorageRequest) (*resources.ObjectStorageResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObjectStorage not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadObjectStorage(context.Context, *resources.ReadObjectStorageRequest) (*resources.ObjectStorageResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadObjectStorage not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateObjectStorage(context.Context, *resources.UpdateObjectStorageRequest) (*resources.ObjectStorageResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObjectStorage not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteObjectStorage(context.Context, *resources.DeleteObjectStorageRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObjectStorage not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateObjectStorageObject(context.Context, *resources.CreateObjectStorageObjectRequest) (*resources.ObjectStorageObjectResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObjectStorageObject not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadObjectStorageObject(context.Context, *resources.ReadObjectStorageObjectRequest) (*resources.ObjectStorageObjectResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadObjectStorageObject not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateObjectStorageObject(context.Context, *resources.UpdateObjectStorageObjectRequest) (*resources.ObjectStorageObjectResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObjectStorageObject not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteObjectStorageObject(context.Context, *resources.DeleteObjectStorageObjectRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObjectStorageObject not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreatePublicIp(context.Context, *resources.CreatePublicIpRequest) (*resources.PublicIpResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePublicIp not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadPublicIp(context.Context, *resources.ReadPublicIpRequest) (*resources.PublicIpResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPublicIp not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdatePublicIp(context.Context, *resources.UpdatePublicIpRequest) (*resources.PublicIpResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePublicIp not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeletePublicIp(context.Context, *resources.DeletePublicIpRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePublicIp not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateKubernetesCluster(context.Context, *resources.CreateKubernetesClusterRequest) (*resources.KubernetesClusterResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKubernetesCluster not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadKubernetesCluster(context.Context, *resources.ReadKubernetesClusterRequest) (*resources.KubernetesClusterResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadKubernetesCluster not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateKubernetesCluster(context.Context, *resources.UpdateKubernetesClusterRequest) (*resources.KubernetesClusterResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKubernetesCluster not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteKubernetesCluster(context.Context, *resources.DeleteKubernetesClusterRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKubernetesCluster not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateKubernetesNodePool(context.Context, *resources.CreateKubernetesNodePoolRequest) (*resources.KubernetesNodePoolResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKubernetesNodePool not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadKubernetesNodePool(context.Context, *resources.ReadKubernetesNodePoolRequest) (*resources.KubernetesNodePoolResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadKubernetesNodePool not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateKubernetesNodePool(context.Context, *resources.UpdateKubernetesNodePoolRequest) (*resources.KubernetesNodePoolResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKubernetesNodePool not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteKubernetesNodePool(context.Context, *resources.DeleteKubernetesNodePoolRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKubernetesNodePool not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateLambda(context.Context, *resources.CreateLambdaRequest) (*resources.LambdaResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLambda not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadLambda(context.Context, *resources.ReadLambdaRequest) (*resources.LambdaResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadLambda not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateLambda(context.Context, *resources.UpdateLambdaRequest) (*resources.LambdaResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLambda not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteLambda(context.Context, *resources.DeleteLambdaRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLambda not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateVault(context.Context, *resources.CreateVaultRequest) (*resources.VaultResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVault not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadVault(context.Context, *resources.ReadVaultRequest) (*resources.VaultResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadVault not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateVault(context.Context, *resources.UpdateVaultRequest) (*resources.VaultResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVault not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteVault(context.Context, *resources.DeleteVaultRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVault not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateVaultAccessPolicy(context.Context, *resources.CreateVaultAccessPolicyRequest) (*resources.VaultAccessPolicyResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVaultAccessPolicy not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadVaultAccessPolicy(context.Context, *resources.ReadVaultAccessPolicyRequest) (*resources.VaultAccessPolicyResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadVaultAccessPolicy not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateVaultAccessPolicy(context.Context, *resources.UpdateVaultAccessPolicyRequest) (*resources.VaultAccessPolicyResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVaultAccessPolicy not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteVaultAccessPolicy(context.Context, *resources.DeleteVaultAccessPolicyRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVaultAccessPolicy not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateVaultSecret(context.Context, *resources.CreateVaultSecretRequest) (*resources.VaultSecretResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVaultSecret not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadVaultSecret(context.Context, *resources.ReadVaultSecretRequest) (*resources.VaultSecretResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadVaultSecret not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateVaultSecret(context.Context, *resources.UpdateVaultSecretRequest) (*resources.VaultSecretResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVaultSecret not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteVaultSecret(context.Context, *resources.DeleteVaultSecretRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVaultSecret not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateVirtualMachine(context.Context, *resources.CreateVirtualMachineRequest) (*resources.VirtualMachineResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVirtualMachine not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadVirtualMachine(context.Context, *resources.ReadVirtualMachineRequest) (*resources.VirtualMachineResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadVirtualMachine not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateVirtualMachine(context.Context, *resources.UpdateVirtualMachineRequest) (*resources.VirtualMachineResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVirtualMachine not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteVirtualMachine(context.Context, *resources.DeleteVirtualMachineRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVirtualMachine not implemented")
}
func (UnimplementedMultyResourceServiceServer) mustEmbedUnimplementedMultyResourceServiceServer() {}

// UnsafeMultyResourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultyResourceServiceServer will
// result in compilation errors.
type UnsafeMultyResourceServiceServer interface {
	mustEmbedUnimplementedMultyResourceServiceServer()
}

func RegisterMultyResourceServiceServer(s grpc.ServiceRegistrar, srv MultyResourceServiceServer) {
	s.RegisterService(&MultyResourceService_ServiceDesc, srv)
}

func _MultyResourceService_CreateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateSubnet(ctx, req.(*resources.CreateSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ReadSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadSubnet(ctx, req.(*resources.ReadSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UpdateSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateSubnet(ctx, req.(*resources.UpdateSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteSubnet(ctx, req.(*resources.DeleteSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateVirtualNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateVirtualNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateVirtualNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateVirtualNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateVirtualNetwork(ctx, req.(*resources.CreateVirtualNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadVirtualNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ReadVirtualNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadVirtualNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadVirtualNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadVirtualNetwork(ctx, req.(*resources.ReadVirtualNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateVirtualNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UpdateVirtualNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateVirtualNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateVirtualNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateVirtualNetwork(ctx, req.(*resources.UpdateVirtualNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteVirtualNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteVirtualNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteVirtualNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteVirtualNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteVirtualNetwork(ctx, req.(*resources.DeleteVirtualNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateNetworkInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateNetworkInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateNetworkInterface(ctx, req.(*resources.CreateNetworkInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ReadNetworkInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadNetworkInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadNetworkInterface(ctx, req.(*resources.ReadNetworkInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UpdateNetworkInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateNetworkInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateNetworkInterface(ctx, req.(*resources.UpdateNetworkInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteNetworkInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteNetworkInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteNetworkInterface(ctx, req.(*resources.DeleteNetworkInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateRouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateRouteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateRouteTable(ctx, req.(*resources.CreateRouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ReadRouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadRouteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadRouteTable(ctx, req.(*resources.ReadRouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UpdateRouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateRouteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateRouteTable(ctx, req.(*resources.UpdateRouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteRouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteRouteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteRouteTable(ctx, req.(*resources.DeleteRouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateRouteTableAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateRouteTableAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateRouteTableAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateRouteTableAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateRouteTableAssociation(ctx, req.(*resources.CreateRouteTableAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadRouteTableAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ReadRouteTableAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadRouteTableAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadRouteTableAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadRouteTableAssociation(ctx, req.(*resources.ReadRouteTableAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateRouteTableAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UpdateRouteTableAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateRouteTableAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateRouteTableAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateRouteTableAssociation(ctx, req.(*resources.UpdateRouteTableAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteRouteTableAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteRouteTableAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteRouteTableAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteRouteTableAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteRouteTableAssociation(ctx, req.(*resources.DeleteRouteTableAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateNetworkSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateNetworkSecurityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateNetworkSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateNetworkSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateNetworkSecurityGroup(ctx, req.(*resources.CreateNetworkSecurityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadNetworkSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ReadNetworkSecurityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadNetworkSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadNetworkSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadNetworkSecurityGroup(ctx, req.(*resources.ReadNetworkSecurityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateNetworkSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UpdateNetworkSecurityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateNetworkSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateNetworkSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateNetworkSecurityGroup(ctx, req.(*resources.UpdateNetworkSecurityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteNetworkSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteNetworkSecurityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteNetworkSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteNetworkSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteNetworkSecurityGroup(ctx, req.(*resources.DeleteNetworkSecurityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateDatabase(ctx, req.(*resources.CreateDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ReadDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadDatabase(ctx, req.(*resources.ReadDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UpdateDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateDatabase(ctx, req.(*resources.UpdateDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteDatabase(ctx, req.(*resources.DeleteDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateObjectStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateObjectStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateObjectStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateObjectStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateObjectStorage(ctx, req.(*resources.CreateObjectStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadObjectStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ReadObjectStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadObjectStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadObjectStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadObjectStorage(ctx, req.(*resources.ReadObjectStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateObjectStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UpdateObjectStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateObjectStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateObjectStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateObjectStorage(ctx, req.(*resources.UpdateObjectStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteObjectStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteObjectStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteObjectStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteObjectStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteObjectStorage(ctx, req.(*resources.DeleteObjectStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateObjectStorageObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateObjectStorageObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateObjectStorageObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateObjectStorageObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateObjectStorageObject(ctx, req.(*resources.CreateObjectStorageObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadObjectStorageObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ReadObjectStorageObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadObjectStorageObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadObjectStorageObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadObjectStorageObject(ctx, req.(*resources.ReadObjectStorageObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateObjectStorageObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UpdateObjectStorageObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateObjectStorageObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateObjectStorageObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateObjectStorageObject(ctx, req.(*resources.UpdateObjectStorageObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteObjectStorageObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteObjectStorageObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteObjectStorageObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteObjectStorageObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteObjectStorageObject(ctx, req.(*resources.DeleteObjectStorageObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreatePublicIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreatePublicIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreatePublicIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreatePublicIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreatePublicIp(ctx, req.(*resources.CreatePublicIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadPublicIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ReadPublicIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadPublicIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadPublicIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadPublicIp(ctx, req.(*resources.ReadPublicIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdatePublicIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UpdatePublicIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdatePublicIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdatePublicIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdatePublicIp(ctx, req.(*resources.UpdatePublicIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeletePublicIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeletePublicIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeletePublicIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeletePublicIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeletePublicIp(ctx, req.(*resources.DeletePublicIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateKubernetesCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateKubernetesClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateKubernetesCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateKubernetesCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateKubernetesCluster(ctx, req.(*resources.CreateKubernetesClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadKubernetesCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ReadKubernetesClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadKubernetesCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadKubernetesCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadKubernetesCluster(ctx, req.(*resources.ReadKubernetesClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateKubernetesCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UpdateKubernetesClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateKubernetesCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateKubernetesCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateKubernetesCluster(ctx, req.(*resources.UpdateKubernetesClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteKubernetesCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteKubernetesClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteKubernetesCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteKubernetesCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteKubernetesCluster(ctx, req.(*resources.DeleteKubernetesClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateKubernetesNodePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateKubernetesNodePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateKubernetesNodePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateKubernetesNodePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateKubernetesNodePool(ctx, req.(*resources.CreateKubernetesNodePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadKubernetesNodePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ReadKubernetesNodePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadKubernetesNodePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadKubernetesNodePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadKubernetesNodePool(ctx, req.(*resources.ReadKubernetesNodePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateKubernetesNodePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UpdateKubernetesNodePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateKubernetesNodePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateKubernetesNodePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateKubernetesNodePool(ctx, req.(*resources.UpdateKubernetesNodePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteKubernetesNodePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteKubernetesNodePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteKubernetesNodePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteKubernetesNodePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteKubernetesNodePool(ctx, req.(*resources.DeleteKubernetesNodePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateLambda_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateLambdaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateLambda(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateLambda",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateLambda(ctx, req.(*resources.CreateLambdaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadLambda_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ReadLambdaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadLambda(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadLambda",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadLambda(ctx, req.(*resources.ReadLambdaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateLambda_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UpdateLambdaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateLambda(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateLambda",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateLambda(ctx, req.(*resources.UpdateLambdaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteLambda_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteLambdaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteLambda(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteLambda",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteLambda(ctx, req.(*resources.DeleteLambdaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateVault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateVault(ctx, req.(*resources.CreateVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ReadVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadVault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadVault(ctx, req.(*resources.ReadVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UpdateVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateVault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateVault(ctx, req.(*resources.UpdateVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteVault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteVault(ctx, req.(*resources.DeleteVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateVaultAccessPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateVaultAccessPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateVaultAccessPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateVaultAccessPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateVaultAccessPolicy(ctx, req.(*resources.CreateVaultAccessPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadVaultAccessPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ReadVaultAccessPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadVaultAccessPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadVaultAccessPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadVaultAccessPolicy(ctx, req.(*resources.ReadVaultAccessPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateVaultAccessPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UpdateVaultAccessPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateVaultAccessPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateVaultAccessPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateVaultAccessPolicy(ctx, req.(*resources.UpdateVaultAccessPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteVaultAccessPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteVaultAccessPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteVaultAccessPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteVaultAccessPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteVaultAccessPolicy(ctx, req.(*resources.DeleteVaultAccessPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateVaultSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateVaultSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateVaultSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateVaultSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateVaultSecret(ctx, req.(*resources.CreateVaultSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadVaultSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ReadVaultSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadVaultSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadVaultSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadVaultSecret(ctx, req.(*resources.ReadVaultSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateVaultSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UpdateVaultSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateVaultSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateVaultSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateVaultSecret(ctx, req.(*resources.UpdateVaultSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteVaultSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteVaultSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteVaultSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteVaultSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteVaultSecret(ctx, req.(*resources.DeleteVaultSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateVirtualMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateVirtualMachine(ctx, req.(*resources.CreateVirtualMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ReadVirtualMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadVirtualMachine(ctx, req.(*resources.ReadVirtualMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.UpdateVirtualMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateVirtualMachine(ctx, req.(*resources.UpdateVirtualMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteVirtualMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteVirtualMachine(ctx, req.(*resources.DeleteVirtualMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MultyResourceService_ServiceDesc is the grpc.ServiceDesc for MultyResourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MultyResourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dev.multy.MultyResourceService",
	HandlerType: (*MultyResourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubnet",
			Handler:    _MultyResourceService_CreateSubnet_Handler,
		},
		{
			MethodName: "ReadSubnet",
			Handler:    _MultyResourceService_ReadSubnet_Handler,
		},
		{
			MethodName: "UpdateSubnet",
			Handler:    _MultyResourceService_UpdateSubnet_Handler,
		},
		{
			MethodName: "DeleteSubnet",
			Handler:    _MultyResourceService_DeleteSubnet_Handler,
		},
		{
			MethodName: "CreateVirtualNetwork",
			Handler:    _MultyResourceService_CreateVirtualNetwork_Handler,
		},
		{
			MethodName: "ReadVirtualNetwork",
			Handler:    _MultyResourceService_ReadVirtualNetwork_Handler,
		},
		{
			MethodName: "UpdateVirtualNetwork",
			Handler:    _MultyResourceService_UpdateVirtualNetwork_Handler,
		},
		{
			MethodName: "DeleteVirtualNetwork",
			Handler:    _MultyResourceService_DeleteVirtualNetwork_Handler,
		},
		{
			MethodName: "CreateNetworkInterface",
			Handler:    _MultyResourceService_CreateNetworkInterface_Handler,
		},
		{
			MethodName: "ReadNetworkInterface",
			Handler:    _MultyResourceService_ReadNetworkInterface_Handler,
		},
		{
			MethodName: "UpdateNetworkInterface",
			Handler:    _MultyResourceService_UpdateNetworkInterface_Handler,
		},
		{
			MethodName: "DeleteNetworkInterface",
			Handler:    _MultyResourceService_DeleteNetworkInterface_Handler,
		},
		{
			MethodName: "CreateRouteTable",
			Handler:    _MultyResourceService_CreateRouteTable_Handler,
		},
		{
			MethodName: "ReadRouteTable",
			Handler:    _MultyResourceService_ReadRouteTable_Handler,
		},
		{
			MethodName: "UpdateRouteTable",
			Handler:    _MultyResourceService_UpdateRouteTable_Handler,
		},
		{
			MethodName: "DeleteRouteTable",
			Handler:    _MultyResourceService_DeleteRouteTable_Handler,
		},
		{
			MethodName: "CreateRouteTableAssociation",
			Handler:    _MultyResourceService_CreateRouteTableAssociation_Handler,
		},
		{
			MethodName: "ReadRouteTableAssociation",
			Handler:    _MultyResourceService_ReadRouteTableAssociation_Handler,
		},
		{
			MethodName: "UpdateRouteTableAssociation",
			Handler:    _MultyResourceService_UpdateRouteTableAssociation_Handler,
		},
		{
			MethodName: "DeleteRouteTableAssociation",
			Handler:    _MultyResourceService_DeleteRouteTableAssociation_Handler,
		},
		{
			MethodName: "CreateNetworkSecurityGroup",
			Handler:    _MultyResourceService_CreateNetworkSecurityGroup_Handler,
		},
		{
			MethodName: "ReadNetworkSecurityGroup",
			Handler:    _MultyResourceService_ReadNetworkSecurityGroup_Handler,
		},
		{
			MethodName: "UpdateNetworkSecurityGroup",
			Handler:    _MultyResourceService_UpdateNetworkSecurityGroup_Handler,
		},
		{
			MethodName: "DeleteNetworkSecurityGroup",
			Handler:    _MultyResourceService_DeleteNetworkSecurityGroup_Handler,
		},
		{
			MethodName: "CreateDatabase",
			Handler:    _MultyResourceService_CreateDatabase_Handler,
		},
		{
			MethodName: "ReadDatabase",
			Handler:    _MultyResourceService_ReadDatabase_Handler,
		},
		{
			MethodName: "UpdateDatabase",
			Handler:    _MultyResourceService_UpdateDatabase_Handler,
		},
		{
			MethodName: "DeleteDatabase",
			Handler:    _MultyResourceService_DeleteDatabase_Handler,
		},
		{
			MethodName: "CreateObjectStorage",
			Handler:    _MultyResourceService_CreateObjectStorage_Handler,
		},
		{
			MethodName: "ReadObjectStorage",
			Handler:    _MultyResourceService_ReadObjectStorage_Handler,
		},
		{
			MethodName: "UpdateObjectStorage",
			Handler:    _MultyResourceService_UpdateObjectStorage_Handler,
		},
		{
			MethodName: "DeleteObjectStorage",
			Handler:    _MultyResourceService_DeleteObjectStorage_Handler,
		},
		{
			MethodName: "CreateObjectStorageObject",
			Handler:    _MultyResourceService_CreateObjectStorageObject_Handler,
		},
		{
			MethodName: "ReadObjectStorageObject",
			Handler:    _MultyResourceService_ReadObjectStorageObject_Handler,
		},
		{
			MethodName: "UpdateObjectStorageObject",
			Handler:    _MultyResourceService_UpdateObjectStorageObject_Handler,
		},
		{
			MethodName: "DeleteObjectStorageObject",
			Handler:    _MultyResourceService_DeleteObjectStorageObject_Handler,
		},
		{
			MethodName: "CreatePublicIp",
			Handler:    _MultyResourceService_CreatePublicIp_Handler,
		},
		{
			MethodName: "ReadPublicIp",
			Handler:    _MultyResourceService_ReadPublicIp_Handler,
		},
		{
			MethodName: "UpdatePublicIp",
			Handler:    _MultyResourceService_UpdatePublicIp_Handler,
		},
		{
			MethodName: "DeletePublicIp",
			Handler:    _MultyResourceService_DeletePublicIp_Handler,
		},
		{
			MethodName: "CreateKubernetesCluster",
			Handler:    _MultyResourceService_CreateKubernetesCluster_Handler,
		},
		{
			MethodName: "ReadKubernetesCluster",
			Handler:    _MultyResourceService_ReadKubernetesCluster_Handler,
		},
		{
			MethodName: "UpdateKubernetesCluster",
			Handler:    _MultyResourceService_UpdateKubernetesCluster_Handler,
		},
		{
			MethodName: "DeleteKubernetesCluster",
			Handler:    _MultyResourceService_DeleteKubernetesCluster_Handler,
		},
		{
			MethodName: "CreateKubernetesNodePool",
			Handler:    _MultyResourceService_CreateKubernetesNodePool_Handler,
		},
		{
			MethodName: "ReadKubernetesNodePool",
			Handler:    _MultyResourceService_ReadKubernetesNodePool_Handler,
		},
		{
			MethodName: "UpdateKubernetesNodePool",
			Handler:    _MultyResourceService_UpdateKubernetesNodePool_Handler,
		},
		{
			MethodName: "DeleteKubernetesNodePool",
			Handler:    _MultyResourceService_DeleteKubernetesNodePool_Handler,
		},
		{
			MethodName: "CreateLambda",
			Handler:    _MultyResourceService_CreateLambda_Handler,
		},
		{
			MethodName: "ReadLambda",
			Handler:    _MultyResourceService_ReadLambda_Handler,
		},
		{
			MethodName: "UpdateLambda",
			Handler:    _MultyResourceService_UpdateLambda_Handler,
		},
		{
			MethodName: "DeleteLambda",
			Handler:    _MultyResourceService_DeleteLambda_Handler,
		},
		{
			MethodName: "CreateVault",
			Handler:    _MultyResourceService_CreateVault_Handler,
		},
		{
			MethodName: "ReadVault",
			Handler:    _MultyResourceService_ReadVault_Handler,
		},
		{
			MethodName: "UpdateVault",
			Handler:    _MultyResourceService_UpdateVault_Handler,
		},
		{
			MethodName: "DeleteVault",
			Handler:    _MultyResourceService_DeleteVault_Handler,
		},
		{
			MethodName: "CreateVaultAccessPolicy",
			Handler:    _MultyResourceService_CreateVaultAccessPolicy_Handler,
		},
		{
			MethodName: "ReadVaultAccessPolicy",
			Handler:    _MultyResourceService_ReadVaultAccessPolicy_Handler,
		},
		{
			MethodName: "UpdateVaultAccessPolicy",
			Handler:    _MultyResourceService_UpdateVaultAccessPolicy_Handler,
		},
		{
			MethodName: "DeleteVaultAccessPolicy",
			Handler:    _MultyResourceService_DeleteVaultAccessPolicy_Handler,
		},
		{
			MethodName: "CreateVaultSecret",
			Handler:    _MultyResourceService_CreateVaultSecret_Handler,
		},
		{
			MethodName: "ReadVaultSecret",
			Handler:    _MultyResourceService_ReadVaultSecret_Handler,
		},
		{
			MethodName: "UpdateVaultSecret",
			Handler:    _MultyResourceService_UpdateVaultSecret_Handler,
		},
		{
			MethodName: "DeleteVaultSecret",
			Handler:    _MultyResourceService_DeleteVaultSecret_Handler,
		},
		{
			MethodName: "CreateVirtualMachine",
			Handler:    _MultyResourceService_CreateVirtualMachine_Handler,
		},
		{
			MethodName: "ReadVirtualMachine",
			Handler:    _MultyResourceService_ReadVirtualMachine_Handler,
		},
		{
			MethodName: "UpdateVirtualMachine",
			Handler:    _MultyResourceService_UpdateVirtualMachine_Handler,
		},
		{
			MethodName: "DeleteVirtualMachine",
			Handler:    _MultyResourceService_DeleteVirtualMachine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/multy_service.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/proto/multy_service.proto

package proto

import (
	context "context"
	commonpb "github.com/multycloud/multy/api/proto/commonpb"
	resourcespb "github.com/multycloud/multy/api/proto/resourcespb"
	userpb "github.com/multycloud/multy/api/proto/userpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MultyResourceServiceClient is the client API for MultyResourceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultyResourceServiceClient interface {
	CreateSubnet(ctx context.Context, in *resourcespb.CreateSubnetRequest, opts ...grpc.CallOption) (*resourcespb.SubnetResource, error)
	ReadSubnet(ctx context.Context, in *resourcespb.ReadSubnetRequest, opts ...grpc.CallOption) (*resourcespb.SubnetResource, error)
	UpdateSubnet(ctx context.Context, in *resourcespb.UpdateSubnetRequest, opts ...grpc.CallOption) (*resourcespb.SubnetResource, error)
	DeleteSubnet(ctx context.Context, in *resourcespb.DeleteSubnetRequest, opts ...grpc.CallOption) (*commonpb.Empty, error)
	CreateVirtualNetwork(ctx context.Context, in *resourcespb.CreateVirtualNetworkRequest, opts ...grpc.CallOption) (*resourcespb.VirtualNetworkResource, error)
	ReadVirtualNetwork(ctx context.Context, in *resourcespb.ReadVirtualNetworkRequest, opts ...grpc.CallOption) (*resourcespb.VirtualNetworkResource, error)
	UpdateVirtualNetwork(ctx context.Context, in *resourcespb.UpdateVirtualNetworkRequest, opts ...grpc.CallOption) (*resourcespb.VirtualNetworkResource, error)
	DeleteVirtualNetwork(ctx context.Context, in *resourcespb.DeleteVirtualNetworkRequest, opts ...grpc.CallOption) (*commonpb.Empty, error)
	CreateNetworkInterface(ctx context.Context, in *resourcespb.CreateNetworkInterfaceRequest, opts ...grpc.CallOption) (*resourcespb.NetworkInterfaceResource, error)
	ReadNetworkInterface(ctx context.Context, in *resourcespb.ReadNetworkInterfaceRequest, opts ...grpc.CallOption) (*resourcespb.NetworkInterfaceResource, error)
	UpdateNetworkInterface(ctx context.Context, in *resourcespb.UpdateNetworkInterfaceRequest, opts ...grpc.CallOption) (*resourcespb.NetworkInterfaceResource, error)
	DeleteNetworkInterface(ctx context.Context, in *resourcespb.DeleteNetworkInterfaceRequest, opts ...grpc.CallOption) (*commonpb.Empty, error)
	CreateNetworkInterfaceSecurityGroupAssociation(ctx context.Context, in *resourcespb.CreateNetworkInterfaceSecurityGroupAssociationRequest, opts ...grpc.CallOption) (*resourcespb.NetworkInterfaceSecurityGroupAssociationResource, error)
	ReadNetworkInterfaceSecurityGroupAssociation(ctx context.Context, in *resourcespb.ReadNetworkInterfaceSecurityGroupAssociationRequest, opts ...grpc.CallOption) (*resourcespb.NetworkInterfaceSecurityGroupAssociationResource, error)
	UpdateNetworkInterfaceSecurityGroupAssociation(ctx context.Context, in *resourcespb.UpdateNetworkInterfaceSecurityGroupAssociationRequest, opts ...grpc.CallOption) (*resourcespb.NetworkInterfaceSecurityGroupAssociationResource, error)
	DeleteNetworkInterfaceSecurityGroupAssociation(ctx context.Context, in *resourcespb.DeleteNetworkInterfaceSecurityGroupAssociationRequest, opts ...grpc.CallOption) (*commonpb.Empty, error)
	CreateRouteTable(ctx context.Context, in *resourcespb.CreateRouteTableRequest, opts ...grpc.CallOption) (*resourcespb.RouteTableResource, error)
	ReadRouteTable(ctx context.Context, in *resourcespb.ReadRouteTableRequest, opts ...grpc.CallOption) (*resourcespb.RouteTableResource, error)
	UpdateRouteTable(ctx context.Context, in *resourcespb.UpdateRouteTableRequest, opts ...grpc.CallOption) (*resourcespb.RouteTableResource, error)
	DeleteRouteTable(ctx context.Context, in *resourcespb.DeleteRouteTableRequest, opts ...grpc.CallOption) (*commonpb.Empty, error)
	CreateRouteTableAssociation(ctx context.Context, in *resourcespb.CreateRouteTableAssociationRequest, opts ...grpc.CallOption) (*resourcespb.RouteTableAssociationResource, error)
	ReadRouteTableAssociation(ctx context.Context, in *resourcespb.ReadRouteTableAssociationRequest, opts ...grpc.CallOption) (*resourcespb.RouteTableAssociationResource, error)
	UpdateRouteTableAssociation(ctx context.Context, in *resourcespb.UpdateRouteTableAssociationRequest, opts ...grpc.CallOption) (*resourcespb.RouteTableAssociationResource, error)
	DeleteRouteTableAssociation(ctx context.Context, in *resourcespb.DeleteRouteTableAssociationRequest, opts ...grpc.CallOption) (*commonpb.Empty, error)
	CreateNetworkSecurityGroup(ctx context.Context, in *resourcespb.CreateNetworkSecurityGroupRequest, opts ...grpc.CallOption) (*resourcespb.NetworkSecurityGroupResource, error)
	ReadNetworkSecurityGroup(ctx context.Context, in *resourcespb.ReadNetworkSecurityGroupRequest, opts ...grpc.CallOption) (*resourcespb.NetworkSecurityGroupResource, error)
	UpdateNetworkSecurityGroup(ctx context.Context, in *resourcespb.UpdateNetworkSecurityGroupRequest, opts ...grpc.CallOption) (*resourcespb.NetworkSecurityGroupResource, error)
	DeleteNetworkSecurityGroup(ctx context.Context, in *resourcespb.DeleteNetworkSecurityGroupRequest, opts ...grpc.CallOption) (*commonpb.Empty, error)
	CreateDatabase(ctx context.Context, in *resourcespb.CreateDatabaseRequest, opts ...grpc.CallOption) (*resourcespb.DatabaseResource, error)
	ReadDatabase(ctx context.Context, in *resourcespb.ReadDatabaseRequest, opts ...grpc.CallOption) (*resourcespb.DatabaseResource, error)
	UpdateDatabase(ctx context.Context, in *resourcespb.UpdateDatabaseRequest, opts ...grpc.CallOption) (*resourcespb.DatabaseResource, error)
	DeleteDatabase(ctx context.Context, in *resourcespb.DeleteDatabaseRequest, opts ...grpc.CallOption) (*commonpb.Empty, error)
	CreateObjectStorage(ctx context.Context, in *resourcespb.CreateObjectStorageRequest, opts ...grpc.CallOption) (*resourcespb.ObjectStorageResource, error)
	ReadObjectStorage(ctx context.Context, in *resourcespb.ReadObjectStorageRequest, opts ...grpc.CallOption) (*resourcespb.ObjectStorageResource, error)
	UpdateObjectStorage(ctx context.Context, in *resourcespb.UpdateObjectStorageRequest, opts ...grpc.CallOption) (*resourcespb.ObjectStorageResource, error)
	DeleteObjectStorage(ctx context.Context, in *resourcespb.DeleteObjectStorageRequest, opts ...grpc.CallOption) (*commonpb.Empty, error)
	CreateObjectStorageObject(ctx context.Context, in *resourcespb.CreateObjectStorageObjectRequest, opts ...grpc.CallOption) (*resourcespb.ObjectStorageObjectResource, error)
	ReadObjectStorageObject(ctx context.Context, in *resourcespb.ReadObjectStorageObjectRequest, opts ...grpc.CallOption) (*resourcespb.ObjectStorageObjectResource, error)
	UpdateObjectStorageObject(ctx context.Context, in *resourcespb.UpdateObjectStorageObjectRequest, opts ...grpc.CallOption) (*resourcespb.ObjectStorageObjectResource, error)
	DeleteObjectStorageObject(ctx context.Context, in *resourcespb.DeleteObjectStorageObjectRequest, opts ...grpc.CallOption) (*commonpb.Empty, error)
	CreatePublicIp(ctx context.Context, in *resourcespb.CreatePublicIpRequest, opts ...grpc.CallOption) (*resourcespb.PublicIpResource, error)
	ReadPublicIp(ctx context.Context, in *resourcespb.ReadPublicIpRequest, opts ...grpc.CallOption) (*resourcespb.PublicIpResource, error)
	UpdatePublicIp(ctx context.Context, in *resourcespb.UpdatePublicIpRequest, opts ...grpc.CallOption) (*resourcespb.PublicIpResource, error)
	DeletePublicIp(ctx context.Context, in *resourcespb.DeletePublicIpRequest, opts ...grpc.CallOption) (*commonpb.Empty, error)
	CreateKubernetesCluster(ctx context.Context, in *resourcespb.CreateKubernetesClusterRequest, opts ...grpc.CallOption) (*resourcespb.KubernetesClusterResource, error)
	ReadKubernetesCluster(ctx context.Context, in *resourcespb.ReadKubernetesClusterRequest, opts ...grpc.CallOption) (*resourcespb.KubernetesClusterResource, error)
	UpdateKubernetesCluster(ctx context.Context, in *resourcespb.UpdateKubernetesClusterRequest, opts ...grpc.CallOption) (*resourcespb.KubernetesClusterResource, error)
	DeleteKubernetesCluster(ctx context.Context, in *resourcespb.DeleteKubernetesClusterRequest, opts ...grpc.CallOption) (*commonpb.Empty, error)
	CreateKubernetesNodePool(ctx context.Context, in *resourcespb.CreateKubernetesNodePoolRequest, opts ...grpc.CallOption) (*resourcespb.KubernetesNodePoolResource, error)
	ReadKubernetesNodePool(ctx context.Context, in *resourcespb.ReadKubernetesNodePoolRequest, opts ...grpc.CallOption) (*resourcespb.KubernetesNodePoolResource, error)
	UpdateKubernetesNodePool(ctx context.Context, in *resourcespb.UpdateKubernetesNodePoolRequest, opts ...grpc.CallOption) (*resourcespb.KubernetesNodePoolResource, error)
	DeleteKubernetesNodePool(ctx context.Context, in *resourcespb.DeleteKubernetesNodePoolRequest, opts ...grpc.CallOption) (*commonpb.Empty, error)
	CreateVault(ctx context.Context, in *resourcespb.CreateVaultRequest, opts ...grpc.CallOption) (*resourcespb.VaultResource, error)
	ReadVault(ctx context.Context, in *resourcespb.ReadVaultRequest, opts ...grpc.CallOption) (*resourcespb.VaultResource, error)
	UpdateVault(ctx context.Context, in *resourcespb.UpdateVaultRequest, opts ...grpc.CallOption) (*resourcespb.VaultResource, error)
	DeleteVault(ctx context.Context, in *resourcespb.DeleteVaultRequest, opts ...grpc.CallOption) (*commonpb.Empty, error)
	CreateVaultAccessPolicy(ctx context.Context, in *resourcespb.CreateVaultAccessPolicyRequest, opts ...grpc.CallOption) (*resourcespb.VaultAccessPolicyResource, error)
	ReadVaultAccessPolicy(ctx context.Context, in *resourcespb.ReadVaultAccessPolicyRequest, opts ...grpc.CallOption) (*resourcespb.VaultAccessPolicyResource, error)
	UpdateVaultAccessPolicy(ctx context.Context, in *resourcespb.UpdateVaultAccessPolicyRequest, opts ...grpc.CallOption) (*resourcespb.VaultAccessPolicyResource, error)
	DeleteVaultAccessPolicy(ctx context.Context, in *resourcespb.DeleteVaultAccessPolicyRequest, opts ...grpc.CallOption) (*commonpb.Empty, error)
	CreateVaultSecret(ctx context.Context, in *resourcespb.CreateVaultSecretRequest, opts ...grpc.CallOption) (*resourcespb.VaultSecretResource, error)
	ReadVaultSecret(ctx context.Context, in *resourcespb.ReadVaultSecretRequest, opts ...grpc.CallOption) (*resourcespb.VaultSecretResource, error)
	UpdateVaultSecret(ctx context.Context, in *resourcespb.UpdateVaultSecretRequest, opts ...grpc.CallOption) (*resourcespb.VaultSecretResource, error)
	DeleteVaultSecret(ctx context.Context, in *resourcespb.DeleteVaultSecretRequest, opts ...grpc.CallOption) (*commonpb.Empty, error)
	CreateVirtualMachine(ctx context.Context, in *resourcespb.CreateVirtualMachineRequest, opts ...grpc.CallOption) (*resourcespb.VirtualMachineResource, error)
	ReadVirtualMachine(ctx context.Context, in *resourcespb.ReadVirtualMachineRequest, opts ...grpc.CallOption) (*resourcespb.VirtualMachineResource, error)
	UpdateVirtualMachine(ctx context.Context, in *resourcespb.UpdateVirtualMachineRequest, opts ...grpc.CallOption) (*resourcespb.VirtualMachineResource, error)
	DeleteVirtualMachine(ctx context.Context, in *resourcespb.DeleteVirtualMachineRequest, opts ...grpc.CallOption) (*commonpb.Empty, error)
	RefreshState(ctx context.Context, in *RefreshStateRequest, opts ...grpc.CallOption) (*commonpb.Empty, error)
	ListResources(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*commonpb.ListResourcesResponse, error)
	DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*commonpb.Empty, error)
}

type multyResourceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMultyResourceServiceClient(cc grpc.ClientConnInterface) MultyResourceServiceClient {
	return &multyResourceServiceClient{cc}
}

func (c *multyResourceServiceClient) CreateSubnet(ctx context.Context, in *resourcespb.CreateSubnetRequest, opts ...grpc.CallOption) (*resourcespb.SubnetResource, error) {
	out := new(resourcespb.SubnetResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadSubnet(ctx context.Context, in *resourcespb.ReadSubnetRequest, opts ...grpc.CallOption) (*resourcespb.SubnetResource, error) {
	out := new(resourcespb.SubnetResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateSubnet(ctx context.Context, in *resourcespb.UpdateSubnetRequest, opts ...grpc.CallOption) (*resourcespb.SubnetResource, error) {
	out := new(resourcespb.SubnetResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteSubnet(ctx context.Context, in *resourcespb.DeleteSubnetRequest, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateVirtualNetwork(ctx context.Context, in *resourcespb.CreateVirtualNetworkRequest, opts ...grpc.CallOption) (*resourcespb.VirtualNetworkResource, error) {
	out := new(resourcespb.VirtualNetworkResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateVirtualNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadVirtualNetwork(ctx context.Context, in *resourcespb.ReadVirtualNetworkRequest, opts ...grpc.CallOption) (*resourcespb.VirtualNetworkResource, error) {
	out := new(resourcespb.VirtualNetworkResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadVirtualNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateVirtualNetwork(ctx context.Context, in *resourcespb.UpdateVirtualNetworkRequest, opts ...grpc.CallOption) (*resourcespb.VirtualNetworkResource, error) {
	out := new(resourcespb.VirtualNetworkResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateVirtualNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteVirtualNetwork(ctx context.Context, in *resourcespb.DeleteVirtualNetworkRequest, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteVirtualNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateNetworkInterface(ctx context.Context, in *resourcespb.CreateNetworkInterfaceRequest, opts ...grpc.CallOption) (*resourcespb.NetworkInterfaceResource, error) {
	out := new(resourcespb.NetworkInterfaceResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateNetworkInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadNetworkInterface(ctx context.Context, in *resourcespb.ReadNetworkInterfaceRequest, opts ...grpc.CallOption) (*resourcespb.NetworkInterfaceResource, error) {
	out := new(resourcespb.NetworkInterfaceResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadNetworkInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateNetworkInterface(ctx context.Context, in *resourcespb.UpdateNetworkInterfaceRequest, opts ...grpc.CallOption) (*resourcespb.NetworkInterfaceResource, error) {
	out := new(resourcespb.NetworkInterfaceResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateNetworkInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteNetworkInterface(ctx context.Context, in *resourcespb.DeleteNetworkInterfaceRequest, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteNetworkInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateNetworkInterfaceSecurityGroupAssociation(ctx context.Context, in *resourcespb.CreateNetworkInterfaceSecurityGroupAssociationRequest, opts ...grpc.CallOption) (*resourcespb.NetworkInterfaceSecurityGroupAssociationResource, error) {
	out := new(resourcespb.NetworkInterfaceSecurityGroupAssociationResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateNetworkInterfaceSecurityGroupAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadNetworkInterfaceSecurityGroupAssociation(ctx context.Context, in *resourcespb.ReadNetworkInterfaceSecurityGroupAssociationRequest, opts ...grpc.CallOption) (*resourcespb.NetworkInterfaceSecurityGroupAssociationResource, error) {
	out := new(resourcespb.NetworkInterfaceSecurityGroupAssociationResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadNetworkInterfaceSecurityGroupAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateNetworkInterfaceSecurityGroupAssociation(ctx context.Context, in *resourcespb.UpdateNetworkInterfaceSecurityGroupAssociationRequest, opts ...grpc.CallOption) (*resourcespb.NetworkInterfaceSecurityGroupAssociationResource, error) {
	out := new(resourcespb.NetworkInterfaceSecurityGroupAssociationResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateNetworkInterfaceSecurityGroupAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteNetworkInterfaceSecurityGroupAssociation(ctx context.Context, in *resourcespb.DeleteNetworkInterfaceSecurityGroupAssociationRequest, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteNetworkInterfaceSecurityGroupAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateRouteTable(ctx context.Context, in *resourcespb.CreateRouteTableRequest, opts ...grpc.CallOption) (*resourcespb.RouteTableResource, error) {
	out := new(resourcespb.RouteTableResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateRouteTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadRouteTable(ctx context.Context, in *resourcespb.ReadRouteTableRequest, opts ...grpc.CallOption) (*resourcespb.RouteTableResource, error) {
	out := new(resourcespb.RouteTableResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadRouteTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateRouteTable(ctx context.Context, in *resourcespb.UpdateRouteTableRequest, opts ...grpc.CallOption) (*resourcespb.RouteTableResource, error) {
	out := new(resourcespb.RouteTableResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateRouteTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteRouteTable(ctx context.Context, in *resourcespb.DeleteRouteTableRequest, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteRouteTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateRouteTableAssociation(ctx context.Context, in *resourcespb.CreateRouteTableAssociationRequest, opts ...grpc.CallOption) (*resourcespb.RouteTableAssociationResource, error) {
	out := new(resourcespb.RouteTableAssociationResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateRouteTableAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadRouteTableAssociation(ctx context.Context, in *resourcespb.ReadRouteTableAssociationRequest, opts ...grpc.CallOption) (*resourcespb.RouteTableAssociationResource, error) {
	out := new(resourcespb.RouteTableAssociationResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadRouteTableAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateRouteTableAssociation(ctx context.Context, in *resourcespb.UpdateRouteTableAssociationRequest, opts ...grpc.CallOption) (*resourcespb.RouteTableAssociationResource, error) {
	out := new(resourcespb.RouteTableAssociationResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateRouteTableAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteRouteTableAssociation(ctx context.Context, in *resourcespb.DeleteRouteTableAssociationRequest, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteRouteTableAssociation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateNetworkSecurityGroup(ctx context.Context, in *resourcespb.CreateNetworkSecurityGroupRequest, opts ...grpc.CallOption) (*resourcespb.NetworkSecurityGroupResource, error) {
	out := new(resourcespb.NetworkSecurityGroupResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateNetworkSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadNetworkSecurityGroup(ctx context.Context, in *resourcespb.ReadNetworkSecurityGroupRequest, opts ...grpc.CallOption) (*resourcespb.NetworkSecurityGroupResource, error) {
	out := new(resourcespb.NetworkSecurityGroupResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadNetworkSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateNetworkSecurityGroup(ctx context.Context, in *resourcespb.UpdateNetworkSecurityGroupRequest, opts ...grpc.CallOption) (*resourcespb.NetworkSecurityGroupResource, error) {
	out := new(resourcespb.NetworkSecurityGroupResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateNetworkSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteNetworkSecurityGroup(ctx context.Context, in *resourcespb.DeleteNetworkSecurityGroupRequest, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteNetworkSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateDatabase(ctx context.Context, in *resourcespb.CreateDatabaseRequest, opts ...grpc.CallOption) (*resourcespb.DatabaseResource, error) {
	out := new(resourcespb.DatabaseResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadDatabase(ctx context.Context, in *resourcespb.ReadDatabaseRequest, opts ...grpc.CallOption) (*resourcespb.DatabaseResource, error) {
	out := new(resourcespb.DatabaseResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateDatabase(ctx context.Context, in *resourcespb.UpdateDatabaseRequest, opts ...grpc.CallOption) (*resourcespb.DatabaseResource, error) {
	out := new(resourcespb.DatabaseResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteDatabase(ctx context.Context, in *resourcespb.DeleteDatabaseRequest, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateObjectStorage(ctx context.Context, in *resourcespb.CreateObjectStorageRequest, opts ...grpc.CallOption) (*resourcespb.ObjectStorageResource, error) {
	out := new(resourcespb.ObjectStorageResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateObjectStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadObjectStorage(ctx context.Context, in *resourcespb.ReadObjectStorageRequest, opts ...grpc.CallOption) (*resourcespb.ObjectStorageResource, error) {
	out := new(resourcespb.ObjectStorageResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadObjectStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateObjectStorage(ctx context.Context, in *resourcespb.UpdateObjectStorageRequest, opts ...grpc.CallOption) (*resourcespb.ObjectStorageResource, error) {
	out := new(resourcespb.ObjectStorageResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateObjectStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteObjectStorage(ctx context.Context, in *resourcespb.DeleteObjectStorageRequest, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteObjectStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateObjectStorageObject(ctx context.Context, in *resourcespb.CreateObjectStorageObjectRequest, opts ...grpc.CallOption) (*resourcespb.ObjectStorageObjectResource, error) {
	out := new(resourcespb.ObjectStorageObjectResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateObjectStorageObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadObjectStorageObject(ctx context.Context, in *resourcespb.ReadObjectStorageObjectRequest, opts ...grpc.CallOption) (*resourcespb.ObjectStorageObjectResource, error) {
	out := new(resourcespb.ObjectStorageObjectResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadObjectStorageObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateObjectStorageObject(ctx context.Context, in *resourcespb.UpdateObjectStorageObjectRequest, opts ...grpc.CallOption) (*resourcespb.ObjectStorageObjectResource, error) {
	out := new(resourcespb.ObjectStorageObjectResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateObjectStorageObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteObjectStorageObject(ctx context.Context, in *resourcespb.DeleteObjectStorageObjectRequest, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteObjectStorageObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreatePublicIp(ctx context.Context, in *resourcespb.CreatePublicIpRequest, opts ...grpc.CallOption) (*resourcespb.PublicIpResource, error) {
	out := new(resourcespb.PublicIpResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreatePublicIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadPublicIp(ctx context.Context, in *resourcespb.ReadPublicIpRequest, opts ...grpc.CallOption) (*resourcespb.PublicIpResource, error) {
	out := new(resourcespb.PublicIpResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadPublicIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdatePublicIp(ctx context.Context, in *resourcespb.UpdatePublicIpRequest, opts ...grpc.CallOption) (*resourcespb.PublicIpResource, error) {
	out := new(resourcespb.PublicIpResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdatePublicIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeletePublicIp(ctx context.Context, in *resourcespb.DeletePublicIpRequest, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeletePublicIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateKubernetesCluster(ctx context.Context, in *resourcespb.CreateKubernetesClusterRequest, opts ...grpc.CallOption) (*resourcespb.KubernetesClusterResource, error) {
	out := new(resourcespb.KubernetesClusterResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateKubernetesCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadKubernetesCluster(ctx context.Context, in *resourcespb.ReadKubernetesClusterRequest, opts ...grpc.CallOption) (*resourcespb.KubernetesClusterResource, error) {
	out := new(resourcespb.KubernetesClusterResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadKubernetesCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateKubernetesCluster(ctx context.Context, in *resourcespb.UpdateKubernetesClusterRequest, opts ...grpc.CallOption) (*resourcespb.KubernetesClusterResource, error) {
	out := new(resourcespb.KubernetesClusterResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateKubernetesCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteKubernetesCluster(ctx context.Context, in *resourcespb.DeleteKubernetesClusterRequest, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteKubernetesCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateKubernetesNodePool(ctx context.Context, in *resourcespb.CreateKubernetesNodePoolRequest, opts ...grpc.CallOption) (*resourcespb.KubernetesNodePoolResource, error) {
	out := new(resourcespb.KubernetesNodePoolResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateKubernetesNodePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadKubernetesNodePool(ctx context.Context, in *resourcespb.ReadKubernetesNodePoolRequest, opts ...grpc.CallOption) (*resourcespb.KubernetesNodePoolResource, error) {
	out := new(resourcespb.KubernetesNodePoolResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadKubernetesNodePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateKubernetesNodePool(ctx context.Context, in *resourcespb.UpdateKubernetesNodePoolRequest, opts ...grpc.CallOption) (*resourcespb.KubernetesNodePoolResource, error) {
	out := new(resourcespb.KubernetesNodePoolResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateKubernetesNodePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteKubernetesNodePool(ctx context.Context, in *resourcespb.DeleteKubernetesNodePoolRequest, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteKubernetesNodePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateVault(ctx context.Context, in *resourcespb.CreateVaultRequest, opts ...grpc.CallOption) (*resourcespb.VaultResource, error) {
	out := new(resourcespb.VaultResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateVault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadVault(ctx context.Context, in *resourcespb.ReadVaultRequest, opts ...grpc.CallOption) (*resourcespb.VaultResource, error) {
	out := new(resourcespb.VaultResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadVault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateVault(ctx context.Context, in *resourcespb.UpdateVaultRequest, opts ...grpc.CallOption) (*resourcespb.VaultResource, error) {
	out := new(resourcespb.VaultResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateVault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteVault(ctx context.Context, in *resourcespb.DeleteVaultRequest, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteVault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateVaultAccessPolicy(ctx context.Context, in *resourcespb.CreateVaultAccessPolicyRequest, opts ...grpc.CallOption) (*resourcespb.VaultAccessPolicyResource, error) {
	out := new(resourcespb.VaultAccessPolicyResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateVaultAccessPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadVaultAccessPolicy(ctx context.Context, in *resourcespb.ReadVaultAccessPolicyRequest, opts ...grpc.CallOption) (*resourcespb.VaultAccessPolicyResource, error) {
	out := new(resourcespb.VaultAccessPolicyResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadVaultAccessPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateVaultAccessPolicy(ctx context.Context, in *resourcespb.UpdateVaultAccessPolicyRequest, opts ...grpc.CallOption) (*resourcespb.VaultAccessPolicyResource, error) {
	out := new(resourcespb.VaultAccessPolicyResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateVaultAccessPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteVaultAccessPolicy(ctx context.Context, in *resourcespb.DeleteVaultAccessPolicyRequest, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteVaultAccessPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateVaultSecret(ctx context.Context, in *resourcespb.CreateVaultSecretRequest, opts ...grpc.CallOption) (*resourcespb.VaultSecretResource, error) {
	out := new(resourcespb.VaultSecretResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateVaultSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadVaultSecret(ctx context.Context, in *resourcespb.ReadVaultSecretRequest, opts ...grpc.CallOption) (*resourcespb.VaultSecretResource, error) {
	out := new(resourcespb.VaultSecretResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadVaultSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateVaultSecret(ctx context.Context, in *resourcespb.UpdateVaultSecretRequest, opts ...grpc.CallOption) (*resourcespb.VaultSecretResource, error) {
	out := new(resourcespb.VaultSecretResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateVaultSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteVaultSecret(ctx context.Context, in *resourcespb.DeleteVaultSecretRequest, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteVaultSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) CreateVirtualMachine(ctx context.Context, in *resourcespb.CreateVirtualMachineRequest, opts ...grpc.CallOption) (*resourcespb.VirtualMachineResource, error) {
	out := new(resourcespb.VirtualMachineResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/CreateVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ReadVirtualMachine(ctx context.Context, in *resourcespb.ReadVirtualMachineRequest, opts ...grpc.CallOption) (*resourcespb.VirtualMachineResource, error) {
	out := new(resourcespb.VirtualMachineResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ReadVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) UpdateVirtualMachine(ctx context.Context, in *resourcespb.UpdateVirtualMachineRequest, opts ...grpc.CallOption) (*resourcespb.VirtualMachineResource, error) {
	out := new(resourcespb.VirtualMachineResource)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/UpdateVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteVirtualMachine(ctx context.Context, in *resourcespb.DeleteVirtualMachineRequest, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) RefreshState(ctx context.Context, in *RefreshStateRequest, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/RefreshState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) ListResources(ctx context.Context, in *commonpb.Empty, opts ...grpc.CallOption) (*commonpb.ListResourcesResponse, error) {
	out := new(commonpb.ListResourcesResponse)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/ListResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multyResourceServiceClient) DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*commonpb.Empty, error) {
	out := new(commonpb.Empty)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyResourceService/DeleteResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MultyResourceServiceServer is the server API for MultyResourceService service.
// All implementations must embed UnimplementedMultyResourceServiceServer
// for forward compatibility
type MultyResourceServiceServer interface {
	CreateSubnet(context.Context, *resourcespb.CreateSubnetRequest) (*resourcespb.SubnetResource, error)
	ReadSubnet(context.Context, *resourcespb.ReadSubnetRequest) (*resourcespb.SubnetResource, error)
	UpdateSubnet(context.Context, *resourcespb.UpdateSubnetRequest) (*resourcespb.SubnetResource, error)
	DeleteSubnet(context.Context, *resourcespb.DeleteSubnetRequest) (*commonpb.Empty, error)
	CreateVirtualNetwork(context.Context, *resourcespb.CreateVirtualNetworkRequest) (*resourcespb.VirtualNetworkResource, error)
	ReadVirtualNetwork(context.Context, *resourcespb.ReadVirtualNetworkRequest) (*resourcespb.VirtualNetworkResource, error)
	UpdateVirtualNetwork(context.Context, *resourcespb.UpdateVirtualNetworkRequest) (*resourcespb.VirtualNetworkResource, error)
	DeleteVirtualNetwork(context.Context, *resourcespb.DeleteVirtualNetworkRequest) (*commonpb.Empty, error)
	CreateNetworkInterface(context.Context, *resourcespb.CreateNetworkInterfaceRequest) (*resourcespb.NetworkInterfaceResource, error)
	ReadNetworkInterface(context.Context, *resourcespb.ReadNetworkInterfaceRequest) (*resourcespb.NetworkInterfaceResource, error)
	UpdateNetworkInterface(context.Context, *resourcespb.UpdateNetworkInterfaceRequest) (*resourcespb.NetworkInterfaceResource, error)
	DeleteNetworkInterface(context.Context, *resourcespb.DeleteNetworkInterfaceRequest) (*commonpb.Empty, error)
	CreateNetworkInterfaceSecurityGroupAssociation(context.Context, *resourcespb.CreateNetworkInterfaceSecurityGroupAssociationRequest) (*resourcespb.NetworkInterfaceSecurityGroupAssociationResource, error)
	ReadNetworkInterfaceSecurityGroupAssociation(context.Context, *resourcespb.ReadNetworkInterfaceSecurityGroupAssociationRequest) (*resourcespb.NetworkInterfaceSecurityGroupAssociationResource, error)
	UpdateNetworkInterfaceSecurityGroupAssociation(context.Context, *resourcespb.UpdateNetworkInterfaceSecurityGroupAssociationRequest) (*resourcespb.NetworkInterfaceSecurityGroupAssociationResource, error)
	DeleteNetworkInterfaceSecurityGroupAssociation(context.Context, *resourcespb.DeleteNetworkInterfaceSecurityGroupAssociationRequest) (*commonpb.Empty, error)
	CreateRouteTable(context.Context, *resourcespb.CreateRouteTableRequest) (*resourcespb.RouteTableResource, error)
	ReadRouteTable(context.Context, *resourcespb.ReadRouteTableRequest) (*resourcespb.RouteTableResource, error)
	UpdateRouteTable(context.Context, *resourcespb.UpdateRouteTableRequest) (*resourcespb.RouteTableResource, error)
	DeleteRouteTable(context.Context, *resourcespb.DeleteRouteTableRequest) (*commonpb.Empty, error)
	CreateRouteTableAssociation(context.Context, *resourcespb.CreateRouteTableAssociationRequest) (*resourcespb.RouteTableAssociationResource, error)
	ReadRouteTableAssociation(context.Context, *resourcespb.ReadRouteTableAssociationRequest) (*resourcespb.RouteTableAssociationResource, error)
	UpdateRouteTableAssociation(context.Context, *resourcespb.UpdateRouteTableAssociationRequest) (*resourcespb.RouteTableAssociationResource, error)
	DeleteRouteTableAssociation(context.Context, *resourcespb.DeleteRouteTableAssociationRequest) (*commonpb.Empty, error)
	CreateNetworkSecurityGroup(context.Context, *resourcespb.CreateNetworkSecurityGroupRequest) (*resourcespb.NetworkSecurityGroupResource, error)
	ReadNetworkSecurityGroup(context.Context, *resourcespb.ReadNetworkSecurityGroupRequest) (*resourcespb.NetworkSecurityGroupResource, error)
	UpdateNetworkSecurityGroup(context.Context, *resourcespb.UpdateNetworkSecurityGroupRequest) (*resourcespb.NetworkSecurityGroupResource, error)
	DeleteNetworkSecurityGroup(context.Context, *resourcespb.DeleteNetworkSecurityGroupRequest) (*commonpb.Empty, error)
	CreateDatabase(context.Context, *resourcespb.CreateDatabaseRequest) (*resourcespb.DatabaseResource, error)
	ReadDatabase(context.Context, *resourcespb.ReadDatabaseRequest) (*resourcespb.DatabaseResource, error)
	UpdateDatabase(context.Context, *resourcespb.UpdateDatabaseRequest) (*resourcespb.DatabaseResource, error)
	DeleteDatabase(context.Context, *resourcespb.DeleteDatabaseRequest) (*commonpb.Empty, error)
	CreateObjectStorage(context.Context, *resourcespb.CreateObjectStorageRequest) (*resourcespb.ObjectStorageResource, error)
	ReadObjectStorage(context.Context, *resourcespb.ReadObjectStorageRequest) (*resourcespb.ObjectStorageResource, error)
	UpdateObjectStorage(context.Context, *resourcespb.UpdateObjectStorageRequest) (*resourcespb.ObjectStorageResource, error)
	DeleteObjectStorage(context.Context, *resourcespb.DeleteObjectStorageRequest) (*commonpb.Empty, error)
	CreateObjectStorageObject(context.Context, *resourcespb.CreateObjectStorageObjectRequest) (*resourcespb.ObjectStorageObjectResource, error)
	ReadObjectStorageObject(context.Context, *resourcespb.ReadObjectStorageObjectRequest) (*resourcespb.ObjectStorageObjectResource, error)
	UpdateObjectStorageObject(context.Context, *resourcespb.UpdateObjectStorageObjectRequest) (*resourcespb.ObjectStorageObjectResource, error)
	DeleteObjectStorageObject(context.Context, *resourcespb.DeleteObjectStorageObjectRequest) (*commonpb.Empty, error)
	CreatePublicIp(context.Context, *resourcespb.CreatePublicIpRequest) (*resourcespb.PublicIpResource, error)
	ReadPublicIp(context.Context, *resourcespb.ReadPublicIpRequest) (*resourcespb.PublicIpResource, error)
	UpdatePublicIp(context.Context, *resourcespb.UpdatePublicIpRequest) (*resourcespb.PublicIpResource, error)
	DeletePublicIp(context.Context, *resourcespb.DeletePublicIpRequest) (*commonpb.Empty, error)
	CreateKubernetesCluster(context.Context, *resourcespb.CreateKubernetesClusterRequest) (*resourcespb.KubernetesClusterResource, error)
	ReadKubernetesCluster(context.Context, *resourcespb.ReadKubernetesClusterRequest) (*resourcespb.KubernetesClusterResource, error)
	UpdateKubernetesCluster(context.Context, *resourcespb.UpdateKubernetesClusterRequest) (*resourcespb.KubernetesClusterResource, error)
	DeleteKubernetesCluster(context.Context, *resourcespb.DeleteKubernetesClusterRequest) (*commonpb.Empty, error)
	CreateKubernetesNodePool(context.Context, *resourcespb.CreateKubernetesNodePoolRequest) (*resourcespb.KubernetesNodePoolResource, error)
	ReadKubernetesNodePool(context.Context, *resourcespb.ReadKubernetesNodePoolRequest) (*resourcespb.KubernetesNodePoolResource, error)
	UpdateKubernetesNodePool(context.Context, *resourcespb.UpdateKubernetesNodePoolRequest) (*resourcespb.KubernetesNodePoolResource, error)
	DeleteKubernetesNodePool(context.Context, *resourcespb.DeleteKubernetesNodePoolRequest) (*commonpb.Empty, error)
	CreateVault(context.Context, *resourcespb.CreateVaultRequest) (*resourcespb.VaultResource, error)
	ReadVault(context.Context, *resourcespb.ReadVaultRequest) (*resourcespb.VaultResource, error)
	UpdateVault(context.Context, *resourcespb.UpdateVaultRequest) (*resourcespb.VaultResource, error)
	DeleteVault(context.Context, *resourcespb.DeleteVaultRequest) (*commonpb.Empty, error)
	CreateVaultAccessPolicy(context.Context, *resourcespb.CreateVaultAccessPolicyRequest) (*resourcespb.VaultAccessPolicyResource, error)
	ReadVaultAccessPolicy(context.Context, *resourcespb.ReadVaultAccessPolicyRequest) (*resourcespb.VaultAccessPolicyResource, error)
	UpdateVaultAccessPolicy(context.Context, *resourcespb.UpdateVaultAccessPolicyRequest) (*resourcespb.VaultAccessPolicyResource, error)
	DeleteVaultAccessPolicy(context.Context, *resourcespb.DeleteVaultAccessPolicyRequest) (*commonpb.Empty, error)
	CreateVaultSecret(context.Context, *resourcespb.CreateVaultSecretRequest) (*resourcespb.VaultSecretResource, error)
	ReadVaultSecret(context.Context, *resourcespb.ReadVaultSecretRequest) (*resourcespb.VaultSecretResource, error)
	UpdateVaultSecret(context.Context, *resourcespb.UpdateVaultSecretRequest) (*resourcespb.VaultSecretResource, error)
	DeleteVaultSecret(context.Context, *resourcespb.DeleteVaultSecretRequest) (*commonpb.Empty, error)
	CreateVirtualMachine(context.Context, *resourcespb.CreateVirtualMachineRequest) (*resourcespb.VirtualMachineResource, error)
	ReadVirtualMachine(context.Context, *resourcespb.ReadVirtualMachineRequest) (*resourcespb.VirtualMachineResource, error)
	UpdateVirtualMachine(context.Context, *resourcespb.UpdateVirtualMachineRequest) (*resourcespb.VirtualMachineResource, error)
	DeleteVirtualMachine(context.Context, *resourcespb.DeleteVirtualMachineRequest) (*commonpb.Empty, error)
	RefreshState(context.Context, *RefreshStateRequest) (*commonpb.Empty, error)
	ListResources(context.Context, *commonpb.Empty) (*commonpb.ListResourcesResponse, error)
	DeleteResource(context.Context, *DeleteResourceRequest) (*commonpb.Empty, error)
	mustEmbedUnimplementedMultyResourceServiceServer()
}

// UnimplementedMultyResourceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMultyResourceServiceServer struct {
}

func (UnimplementedMultyResourceServiceServer) CreateSubnet(context.Context, *resourcespb.CreateSubnetRequest) (*resourcespb.SubnetResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubnet not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadSubnet(context.Context, *resourcespb.ReadSubnetRequest) (*resourcespb.SubnetResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSubnet not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateSubnet(context.Context, *resourcespb.UpdateSubnetRequest) (*resourcespb.SubnetResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubnet not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteSubnet(context.Context, *resourcespb.DeleteSubnetRequest) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubnet not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateVirtualNetwork(context.Context, *resourcespb.CreateVirtualNetworkRequest) (*resourcespb.VirtualNetworkResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVirtualNetwork not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadVirtualNetwork(context.Context, *resourcespb.ReadVirtualNetworkRequest) (*resourcespb.VirtualNetworkResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadVirtualNetwork not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateVirtualNetwork(context.Context, *resourcespb.UpdateVirtualNetworkRequest) (*resourcespb.VirtualNetworkResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVirtualNetwork not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteVirtualNetwork(context.Context, *resourcespb.DeleteVirtualNetworkRequest) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVirtualNetwork not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateNetworkInterface(context.Context, *resourcespb.CreateNetworkInterfaceRequest) (*resourcespb.NetworkInterfaceResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetworkInterface not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadNetworkInterface(context.Context, *resourcespb.ReadNetworkInterfaceRequest) (*resourcespb.NetworkInterfaceResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadNetworkInterface not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateNetworkInterface(context.Context, *resourcespb.UpdateNetworkInterfaceRequest) (*resourcespb.NetworkInterfaceResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNetworkInterface not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteNetworkInterface(context.Context, *resourcespb.DeleteNetworkInterfaceRequest) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetworkInterface not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateNetworkInterfaceSecurityGroupAssociation(context.Context, *resourcespb.CreateNetworkInterfaceSecurityGroupAssociationRequest) (*resourcespb.NetworkInterfaceSecurityGroupAssociationResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetworkInterfaceSecurityGroupAssociation not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadNetworkInterfaceSecurityGroupAssociation(context.Context, *resourcespb.ReadNetworkInterfaceSecurityGroupAssociationRequest) (*resourcespb.NetworkInterfaceSecurityGroupAssociationResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadNetworkInterfaceSecurityGroupAssociation not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateNetworkInterfaceSecurityGroupAssociation(context.Context, *resourcespb.UpdateNetworkInterfaceSecurityGroupAssociationRequest) (*resourcespb.NetworkInterfaceSecurityGroupAssociationResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNetworkInterfaceSecurityGroupAssociation not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteNetworkInterfaceSecurityGroupAssociation(context.Context, *resourcespb.DeleteNetworkInterfaceSecurityGroupAssociationRequest) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetworkInterfaceSecurityGroupAssociation not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateRouteTable(context.Context, *resourcespb.CreateRouteTableRequest) (*resourcespb.RouteTableResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRouteTable not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadRouteTable(context.Context, *resourcespb.ReadRouteTableRequest) (*resourcespb.RouteTableResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadRouteTable not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateRouteTable(context.Context, *resourcespb.UpdateRouteTableRequest) (*resourcespb.RouteTableResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRouteTable not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteRouteTable(context.Context, *resourcespb.DeleteRouteTableRequest) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRouteTable not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateRouteTableAssociation(context.Context, *resourcespb.CreateRouteTableAssociationRequest) (*resourcespb.RouteTableAssociationResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRouteTableAssociation not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadRouteTableAssociation(context.Context, *resourcespb.ReadRouteTableAssociationRequest) (*resourcespb.RouteTableAssociationResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadRouteTableAssociation not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateRouteTableAssociation(context.Context, *resourcespb.UpdateRouteTableAssociationRequest) (*resourcespb.RouteTableAssociationResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRouteTableAssociation not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteRouteTableAssociation(context.Context, *resourcespb.DeleteRouteTableAssociationRequest) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRouteTableAssociation not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateNetworkSecurityGroup(context.Context, *resourcespb.CreateNetworkSecurityGroupRequest) (*resourcespb.NetworkSecurityGroupResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNetworkSecurityGroup not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadNetworkSecurityGroup(context.Context, *resourcespb.ReadNetworkSecurityGroupRequest) (*resourcespb.NetworkSecurityGroupResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadNetworkSecurityGroup not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateNetworkSecurityGroup(context.Context, *resourcespb.UpdateNetworkSecurityGroupRequest) (*resourcespb.NetworkSecurityGroupResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNetworkSecurityGroup not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteNetworkSecurityGroup(context.Context, *resourcespb.DeleteNetworkSecurityGroupRequest) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetworkSecurityGroup not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateDatabase(context.Context, *resourcespb.CreateDatabaseRequest) (*resourcespb.DatabaseResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatabase not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadDatabase(context.Context, *resourcespb.ReadDatabaseRequest) (*resourcespb.DatabaseResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadDatabase not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateDatabase(context.Context, *resourcespb.UpdateDatabaseRequest) (*resourcespb.DatabaseResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatabase not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteDatabase(context.Context, *resourcespb.DeleteDatabaseRequest) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatabase not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateObjectStorage(context.Context, *resourcespb.CreateObjectStorageRequest) (*resourcespb.ObjectStorageResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObjectStorage not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadObjectStorage(context.Context, *resourcespb.ReadObjectStorageRequest) (*resourcespb.ObjectStorageResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadObjectStorage not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateObjectStorage(context.Context, *resourcespb.UpdateObjectStorageRequest) (*resourcespb.ObjectStorageResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObjectStorage not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteObjectStorage(context.Context, *resourcespb.DeleteObjectStorageRequest) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObjectStorage not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateObjectStorageObject(context.Context, *resourcespb.CreateObjectStorageObjectRequest) (*resourcespb.ObjectStorageObjectResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateObjectStorageObject not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadObjectStorageObject(context.Context, *resourcespb.ReadObjectStorageObjectRequest) (*resourcespb.ObjectStorageObjectResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadObjectStorageObject not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateObjectStorageObject(context.Context, *resourcespb.UpdateObjectStorageObjectRequest) (*resourcespb.ObjectStorageObjectResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObjectStorageObject not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteObjectStorageObject(context.Context, *resourcespb.DeleteObjectStorageObjectRequest) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteObjectStorageObject not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreatePublicIp(context.Context, *resourcespb.CreatePublicIpRequest) (*resourcespb.PublicIpResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePublicIp not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadPublicIp(context.Context, *resourcespb.ReadPublicIpRequest) (*resourcespb.PublicIpResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPublicIp not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdatePublicIp(context.Context, *resourcespb.UpdatePublicIpRequest) (*resourcespb.PublicIpResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePublicIp not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeletePublicIp(context.Context, *resourcespb.DeletePublicIpRequest) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePublicIp not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateKubernetesCluster(context.Context, *resourcespb.CreateKubernetesClusterRequest) (*resourcespb.KubernetesClusterResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKubernetesCluster not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadKubernetesCluster(context.Context, *resourcespb.ReadKubernetesClusterRequest) (*resourcespb.KubernetesClusterResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadKubernetesCluster not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateKubernetesCluster(context.Context, *resourcespb.UpdateKubernetesClusterRequest) (*resourcespb.KubernetesClusterResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKubernetesCluster not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteKubernetesCluster(context.Context, *resourcespb.DeleteKubernetesClusterRequest) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKubernetesCluster not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateKubernetesNodePool(context.Context, *resourcespb.CreateKubernetesNodePoolRequest) (*resourcespb.KubernetesNodePoolResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKubernetesNodePool not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadKubernetesNodePool(context.Context, *resourcespb.ReadKubernetesNodePoolRequest) (*resourcespb.KubernetesNodePoolResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadKubernetesNodePool not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateKubernetesNodePool(context.Context, *resourcespb.UpdateKubernetesNodePoolRequest) (*resourcespb.KubernetesNodePoolResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKubernetesNodePool not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteKubernetesNodePool(context.Context, *resourcespb.DeleteKubernetesNodePoolRequest) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKubernetesNodePool not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateVault(context.Context, *resourcespb.CreateVaultRequest) (*resourcespb.VaultResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVault not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadVault(context.Context, *resourcespb.ReadVaultRequest) (*resourcespb.VaultResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadVault not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateVault(context.Context, *resourcespb.UpdateVaultRequest) (*resourcespb.VaultResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVault not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteVault(context.Context, *resourcespb.DeleteVaultRequest) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVault not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateVaultAccessPolicy(context.Context, *resourcespb.CreateVaultAccessPolicyRequest) (*resourcespb.VaultAccessPolicyResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVaultAccessPolicy not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadVaultAccessPolicy(context.Context, *resourcespb.ReadVaultAccessPolicyRequest) (*resourcespb.VaultAccessPolicyResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadVaultAccessPolicy not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateVaultAccessPolicy(context.Context, *resourcespb.UpdateVaultAccessPolicyRequest) (*resourcespb.VaultAccessPolicyResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVaultAccessPolicy not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteVaultAccessPolicy(context.Context, *resourcespb.DeleteVaultAccessPolicyRequest) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVaultAccessPolicy not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateVaultSecret(context.Context, *resourcespb.CreateVaultSecretRequest) (*resourcespb.VaultSecretResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVaultSecret not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadVaultSecret(context.Context, *resourcespb.ReadVaultSecretRequest) (*resourcespb.VaultSecretResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadVaultSecret not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateVaultSecret(context.Context, *resourcespb.UpdateVaultSecretRequest) (*resourcespb.VaultSecretResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVaultSecret not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteVaultSecret(context.Context, *resourcespb.DeleteVaultSecretRequest) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVaultSecret not implemented")
}
func (UnimplementedMultyResourceServiceServer) CreateVirtualMachine(context.Context, *resourcespb.CreateVirtualMachineRequest) (*resourcespb.VirtualMachineResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVirtualMachine not implemented")
}
func (UnimplementedMultyResourceServiceServer) ReadVirtualMachine(context.Context, *resourcespb.ReadVirtualMachineRequest) (*resourcespb.VirtualMachineResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadVirtualMachine not implemented")
}
func (UnimplementedMultyResourceServiceServer) UpdateVirtualMachine(context.Context, *resourcespb.UpdateVirtualMachineRequest) (*resourcespb.VirtualMachineResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVirtualMachine not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteVirtualMachine(context.Context, *resourcespb.DeleteVirtualMachineRequest) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVirtualMachine not implemented")
}
func (UnimplementedMultyResourceServiceServer) RefreshState(context.Context, *RefreshStateRequest) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshState not implemented")
}
func (UnimplementedMultyResourceServiceServer) ListResources(context.Context, *commonpb.Empty) (*commonpb.ListResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResources not implemented")
}
func (UnimplementedMultyResourceServiceServer) DeleteResource(context.Context, *DeleteResourceRequest) (*commonpb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}
func (UnimplementedMultyResourceServiceServer) mustEmbedUnimplementedMultyResourceServiceServer() {}

// UnsafeMultyResourceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultyResourceServiceServer will
// result in compilation errors.
type UnsafeMultyResourceServiceServer interface {
	mustEmbedUnimplementedMultyResourceServiceServer()
}

func RegisterMultyResourceServiceServer(s grpc.ServiceRegistrar, srv MultyResourceServiceServer) {
	s.RegisterService(&MultyResourceService_ServiceDesc, srv)
}

func _MultyResourceService_CreateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.CreateSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateSubnet(ctx, req.(*resourcespb.CreateSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.ReadSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadSubnet(ctx, req.(*resourcespb.ReadSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.UpdateSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateSubnet(ctx, req.(*resourcespb.UpdateSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.DeleteSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteSubnet(ctx, req.(*resourcespb.DeleteSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateVirtualNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.CreateVirtualNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateVirtualNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateVirtualNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateVirtualNetwork(ctx, req.(*resourcespb.CreateVirtualNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadVirtualNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.ReadVirtualNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadVirtualNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadVirtualNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadVirtualNetwork(ctx, req.(*resourcespb.ReadVirtualNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateVirtualNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.UpdateVirtualNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateVirtualNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateVirtualNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateVirtualNetwork(ctx, req.(*resourcespb.UpdateVirtualNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteVirtualNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.DeleteVirtualNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteVirtualNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteVirtualNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteVirtualNetwork(ctx, req.(*resourcespb.DeleteVirtualNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.CreateNetworkInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateNetworkInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateNetworkInterface(ctx, req.(*resourcespb.CreateNetworkInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.ReadNetworkInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadNetworkInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadNetworkInterface(ctx, req.(*resourcespb.ReadNetworkInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.UpdateNetworkInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateNetworkInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateNetworkInterface(ctx, req.(*resourcespb.UpdateNetworkInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteNetworkInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.DeleteNetworkInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteNetworkInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteNetworkInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteNetworkInterface(ctx, req.(*resourcespb.DeleteNetworkInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateNetworkInterfaceSecurityGroupAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.CreateNetworkInterfaceSecurityGroupAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateNetworkInterfaceSecurityGroupAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateNetworkInterfaceSecurityGroupAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateNetworkInterfaceSecurityGroupAssociation(ctx, req.(*resourcespb.CreateNetworkInterfaceSecurityGroupAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadNetworkInterfaceSecurityGroupAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.ReadNetworkInterfaceSecurityGroupAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadNetworkInterfaceSecurityGroupAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadNetworkInterfaceSecurityGroupAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadNetworkInterfaceSecurityGroupAssociation(ctx, req.(*resourcespb.ReadNetworkInterfaceSecurityGroupAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateNetworkInterfaceSecurityGroupAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.UpdateNetworkInterfaceSecurityGroupAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateNetworkInterfaceSecurityGroupAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateNetworkInterfaceSecurityGroupAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateNetworkInterfaceSecurityGroupAssociation(ctx, req.(*resourcespb.UpdateNetworkInterfaceSecurityGroupAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteNetworkInterfaceSecurityGroupAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.DeleteNetworkInterfaceSecurityGroupAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteNetworkInterfaceSecurityGroupAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteNetworkInterfaceSecurityGroupAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteNetworkInterfaceSecurityGroupAssociation(ctx, req.(*resourcespb.DeleteNetworkInterfaceSecurityGroupAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.CreateRouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateRouteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateRouteTable(ctx, req.(*resourcespb.CreateRouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.ReadRouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadRouteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadRouteTable(ctx, req.(*resourcespb.ReadRouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.UpdateRouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateRouteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateRouteTable(ctx, req.(*resourcespb.UpdateRouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteRouteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.DeleteRouteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteRouteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteRouteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteRouteTable(ctx, req.(*resourcespb.DeleteRouteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateRouteTableAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.CreateRouteTableAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateRouteTableAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateRouteTableAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateRouteTableAssociation(ctx, req.(*resourcespb.CreateRouteTableAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadRouteTableAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.ReadRouteTableAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadRouteTableAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadRouteTableAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadRouteTableAssociation(ctx, req.(*resourcespb.ReadRouteTableAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateRouteTableAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.UpdateRouteTableAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateRouteTableAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateRouteTableAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateRouteTableAssociation(ctx, req.(*resourcespb.UpdateRouteTableAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteRouteTableAssociation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.DeleteRouteTableAssociationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteRouteTableAssociation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteRouteTableAssociation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteRouteTableAssociation(ctx, req.(*resourcespb.DeleteRouteTableAssociationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateNetworkSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.CreateNetworkSecurityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateNetworkSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateNetworkSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateNetworkSecurityGroup(ctx, req.(*resourcespb.CreateNetworkSecurityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadNetworkSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.ReadNetworkSecurityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadNetworkSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadNetworkSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadNetworkSecurityGroup(ctx, req.(*resourcespb.ReadNetworkSecurityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateNetworkSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.UpdateNetworkSecurityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateNetworkSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateNetworkSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateNetworkSecurityGroup(ctx, req.(*resourcespb.UpdateNetworkSecurityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteNetworkSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.DeleteNetworkSecurityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteNetworkSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteNetworkSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteNetworkSecurityGroup(ctx, req.(*resourcespb.DeleteNetworkSecurityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.CreateDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateDatabase(ctx, req.(*resourcespb.CreateDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.ReadDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadDatabase(ctx, req.(*resourcespb.ReadDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.UpdateDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateDatabase(ctx, req.(*resourcespb.UpdateDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.DeleteDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteDatabase(ctx, req.(*resourcespb.DeleteDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateObjectStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.CreateObjectStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateObjectStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateObjectStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateObjectStorage(ctx, req.(*resourcespb.CreateObjectStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadObjectStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.ReadObjectStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadObjectStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadObjectStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadObjectStorage(ctx, req.(*resourcespb.ReadObjectStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateObjectStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.UpdateObjectStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateObjectStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateObjectStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateObjectStorage(ctx, req.(*resourcespb.UpdateObjectStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteObjectStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.DeleteObjectStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteObjectStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteObjectStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteObjectStorage(ctx, req.(*resourcespb.DeleteObjectStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateObjectStorageObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.CreateObjectStorageObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateObjectStorageObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateObjectStorageObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateObjectStorageObject(ctx, req.(*resourcespb.CreateObjectStorageObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadObjectStorageObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.ReadObjectStorageObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadObjectStorageObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadObjectStorageObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadObjectStorageObject(ctx, req.(*resourcespb.ReadObjectStorageObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateObjectStorageObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.UpdateObjectStorageObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateObjectStorageObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateObjectStorageObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateObjectStorageObject(ctx, req.(*resourcespb.UpdateObjectStorageObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteObjectStorageObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.DeleteObjectStorageObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteObjectStorageObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteObjectStorageObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteObjectStorageObject(ctx, req.(*resourcespb.DeleteObjectStorageObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreatePublicIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.CreatePublicIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreatePublicIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreatePublicIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreatePublicIp(ctx, req.(*resourcespb.CreatePublicIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadPublicIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.ReadPublicIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadPublicIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadPublicIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadPublicIp(ctx, req.(*resourcespb.ReadPublicIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdatePublicIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.UpdatePublicIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdatePublicIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdatePublicIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdatePublicIp(ctx, req.(*resourcespb.UpdatePublicIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeletePublicIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.DeletePublicIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeletePublicIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeletePublicIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeletePublicIp(ctx, req.(*resourcespb.DeletePublicIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateKubernetesCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.CreateKubernetesClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateKubernetesCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateKubernetesCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateKubernetesCluster(ctx, req.(*resourcespb.CreateKubernetesClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadKubernetesCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.ReadKubernetesClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadKubernetesCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadKubernetesCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadKubernetesCluster(ctx, req.(*resourcespb.ReadKubernetesClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateKubernetesCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.UpdateKubernetesClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateKubernetesCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateKubernetesCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateKubernetesCluster(ctx, req.(*resourcespb.UpdateKubernetesClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteKubernetesCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.DeleteKubernetesClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteKubernetesCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteKubernetesCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteKubernetesCluster(ctx, req.(*resourcespb.DeleteKubernetesClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateKubernetesNodePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.CreateKubernetesNodePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateKubernetesNodePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateKubernetesNodePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateKubernetesNodePool(ctx, req.(*resourcespb.CreateKubernetesNodePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadKubernetesNodePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.ReadKubernetesNodePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadKubernetesNodePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadKubernetesNodePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadKubernetesNodePool(ctx, req.(*resourcespb.ReadKubernetesNodePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateKubernetesNodePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.UpdateKubernetesNodePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateKubernetesNodePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateKubernetesNodePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateKubernetesNodePool(ctx, req.(*resourcespb.UpdateKubernetesNodePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteKubernetesNodePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.DeleteKubernetesNodePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteKubernetesNodePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteKubernetesNodePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteKubernetesNodePool(ctx, req.(*resourcespb.DeleteKubernetesNodePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.CreateVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateVault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateVault(ctx, req.(*resourcespb.CreateVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.ReadVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadVault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadVault(ctx, req.(*resourcespb.ReadVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.UpdateVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateVault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateVault(ctx, req.(*resourcespb.UpdateVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteVault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.DeleteVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteVault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteVault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteVault(ctx, req.(*resourcespb.DeleteVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateVaultAccessPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.CreateVaultAccessPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateVaultAccessPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateVaultAccessPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateVaultAccessPolicy(ctx, req.(*resourcespb.CreateVaultAccessPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadVaultAccessPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.ReadVaultAccessPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadVaultAccessPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadVaultAccessPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadVaultAccessPolicy(ctx, req.(*resourcespb.ReadVaultAccessPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateVaultAccessPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.UpdateVaultAccessPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateVaultAccessPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateVaultAccessPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateVaultAccessPolicy(ctx, req.(*resourcespb.UpdateVaultAccessPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteVaultAccessPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.DeleteVaultAccessPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteVaultAccessPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteVaultAccessPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteVaultAccessPolicy(ctx, req.(*resourcespb.DeleteVaultAccessPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateVaultSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.CreateVaultSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateVaultSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateVaultSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateVaultSecret(ctx, req.(*resourcespb.CreateVaultSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadVaultSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.ReadVaultSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadVaultSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadVaultSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadVaultSecret(ctx, req.(*resourcespb.ReadVaultSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateVaultSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.UpdateVaultSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateVaultSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateVaultSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateVaultSecret(ctx, req.(*resourcespb.UpdateVaultSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteVaultSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.DeleteVaultSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteVaultSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteVaultSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteVaultSecret(ctx, req.(*resourcespb.DeleteVaultSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_CreateVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.CreateVirtualMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).CreateVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/CreateVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).CreateVirtualMachine(ctx, req.(*resourcespb.CreateVirtualMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ReadVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.ReadVirtualMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ReadVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ReadVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ReadVirtualMachine(ctx, req.(*resourcespb.ReadVirtualMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_UpdateVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.UpdateVirtualMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).UpdateVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/UpdateVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).UpdateVirtualMachine(ctx, req.(*resourcespb.UpdateVirtualMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resourcespb.DeleteVirtualMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteVirtualMachine(ctx, req.(*resourcespb.DeleteVirtualMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_RefreshState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).RefreshState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/RefreshState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).RefreshState(ctx, req.(*RefreshStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_ListResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).ListResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/ListResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).ListResources(ctx, req.(*commonpb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultyResourceService_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyResourceServiceServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyResourceService/DeleteResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyResourceServiceServer).DeleteResource(ctx, req.(*DeleteResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MultyResourceService_ServiceDesc is the grpc.ServiceDesc for MultyResourceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MultyResourceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dev.multy.MultyResourceService",
	HandlerType: (*MultyResourceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubnet",
			Handler:    _MultyResourceService_CreateSubnet_Handler,
		},
		{
			MethodName: "ReadSubnet",
			Handler:    _MultyResourceService_ReadSubnet_Handler,
		},
		{
			MethodName: "UpdateSubnet",
			Handler:    _MultyResourceService_UpdateSubnet_Handler,
		},
		{
			MethodName: "DeleteSubnet",
			Handler:    _MultyResourceService_DeleteSubnet_Handler,
		},
		{
			MethodName: "CreateVirtualNetwork",
			Handler:    _MultyResourceService_CreateVirtualNetwork_Handler,
		},
		{
			MethodName: "ReadVirtualNetwork",
			Handler:    _MultyResourceService_ReadVirtualNetwork_Handler,
		},
		{
			MethodName: "UpdateVirtualNetwork",
			Handler:    _MultyResourceService_UpdateVirtualNetwork_Handler,
		},
		{
			MethodName: "DeleteVirtualNetwork",
			Handler:    _MultyResourceService_DeleteVirtualNetwork_Handler,
		},
		{
			MethodName: "CreateNetworkInterface",
			Handler:    _MultyResourceService_CreateNetworkInterface_Handler,
		},
		{
			MethodName: "ReadNetworkInterface",
			Handler:    _MultyResourceService_ReadNetworkInterface_Handler,
		},
		{
			MethodName: "UpdateNetworkInterface",
			Handler:    _MultyResourceService_UpdateNetworkInterface_Handler,
		},
		{
			MethodName: "DeleteNetworkInterface",
			Handler:    _MultyResourceService_DeleteNetworkInterface_Handler,
		},
		{
			MethodName: "CreateNetworkInterfaceSecurityGroupAssociation",
			Handler:    _MultyResourceService_CreateNetworkInterfaceSecurityGroupAssociation_Handler,
		},
		{
			MethodName: "ReadNetworkInterfaceSecurityGroupAssociation",
			Handler:    _MultyResourceService_ReadNetworkInterfaceSecurityGroupAssociation_Handler,
		},
		{
			MethodName: "UpdateNetworkInterfaceSecurityGroupAssociation",
			Handler:    _MultyResourceService_UpdateNetworkInterfaceSecurityGroupAssociation_Handler,
		},
		{
			MethodName: "DeleteNetworkInterfaceSecurityGroupAssociation",
			Handler:    _MultyResourceService_DeleteNetworkInterfaceSecurityGroupAssociation_Handler,
		},
		{
			MethodName: "CreateRouteTable",
			Handler:    _MultyResourceService_CreateRouteTable_Handler,
		},
		{
			MethodName: "ReadRouteTable",
			Handler:    _MultyResourceService_ReadRouteTable_Handler,
		},
		{
			MethodName: "UpdateRouteTable",
			Handler:    _MultyResourceService_UpdateRouteTable_Handler,
		},
		{
			MethodName: "DeleteRouteTable",
			Handler:    _MultyResourceService_DeleteRouteTable_Handler,
		},
		{
			MethodName: "CreateRouteTableAssociation",
			Handler:    _MultyResourceService_CreateRouteTableAssociation_Handler,
		},
		{
			MethodName: "ReadRouteTableAssociation",
			Handler:    _MultyResourceService_ReadRouteTableAssociation_Handler,
		},
		{
			MethodName: "UpdateRouteTableAssociation",
			Handler:    _MultyResourceService_UpdateRouteTableAssociation_Handler,
		},
		{
			MethodName: "DeleteRouteTableAssociation",
			Handler:    _MultyResourceService_DeleteRouteTableAssociation_Handler,
		},
		{
			MethodName: "CreateNetworkSecurityGroup",
			Handler:    _MultyResourceService_CreateNetworkSecurityGroup_Handler,
		},
		{
			MethodName: "ReadNetworkSecurityGroup",
			Handler:    _MultyResourceService_ReadNetworkSecurityGroup_Handler,
		},
		{
			MethodName: "UpdateNetworkSecurityGroup",
			Handler:    _MultyResourceService_UpdateNetworkSecurityGroup_Handler,
		},
		{
			MethodName: "DeleteNetworkSecurityGroup",
			Handler:    _MultyResourceService_DeleteNetworkSecurityGroup_Handler,
		},
		{
			MethodName: "CreateDatabase",
			Handler:    _MultyResourceService_CreateDatabase_Handler,
		},
		{
			MethodName: "ReadDatabase",
			Handler:    _MultyResourceService_ReadDatabase_Handler,
		},
		{
			MethodName: "UpdateDatabase",
			Handler:    _MultyResourceService_UpdateDatabase_Handler,
		},
		{
			MethodName: "DeleteDatabase",
			Handler:    _MultyResourceService_DeleteDatabase_Handler,
		},
		{
			MethodName: "CreateObjectStorage",
			Handler:    _MultyResourceService_CreateObjectStorage_Handler,
		},
		{
			MethodName: "ReadObjectStorage",
			Handler:    _MultyResourceService_ReadObjectStorage_Handler,
		},
		{
			MethodName: "UpdateObjectStorage",
			Handler:    _MultyResourceService_UpdateObjectStorage_Handler,
		},
		{
			MethodName: "DeleteObjectStorage",
			Handler:    _MultyResourceService_DeleteObjectStorage_Handler,
		},
		{
			MethodName: "CreateObjectStorageObject",
			Handler:    _MultyResourceService_CreateObjectStorageObject_Handler,
		},
		{
			MethodName: "ReadObjectStorageObject",
			Handler:    _MultyResourceService_ReadObjectStorageObject_Handler,
		},
		{
			MethodName: "UpdateObjectStorageObject",
			Handler:    _MultyResourceService_UpdateObjectStorageObject_Handler,
		},
		{
			MethodName: "DeleteObjectStorageObject",
			Handler:    _MultyResourceService_DeleteObjectStorageObject_Handler,
		},
		{
			MethodName: "CreatePublicIp",
			Handler:    _MultyResourceService_CreatePublicIp_Handler,
		},
		{
			MethodName: "ReadPublicIp",
			Handler:    _MultyResourceService_ReadPublicIp_Handler,
		},
		{
			MethodName: "UpdatePublicIp",
			Handler:    _MultyResourceService_UpdatePublicIp_Handler,
		},
		{
			MethodName: "DeletePublicIp",
			Handler:    _MultyResourceService_DeletePublicIp_Handler,
		},
		{
			MethodName: "CreateKubernetesCluster",
			Handler:    _MultyResourceService_CreateKubernetesCluster_Handler,
		},
		{
			MethodName: "ReadKubernetesCluster",
			Handler:    _MultyResourceService_ReadKubernetesCluster_Handler,
		},
		{
			MethodName: "UpdateKubernetesCluster",
			Handler:    _MultyResourceService_UpdateKubernetesCluster_Handler,
		},
		{
			MethodName: "DeleteKubernetesCluster",
			Handler:    _MultyResourceService_DeleteKubernetesCluster_Handler,
		},
		{
			MethodName: "CreateKubernetesNodePool",
			Handler:    _MultyResourceService_CreateKubernetesNodePool_Handler,
		},
		{
			MethodName: "ReadKubernetesNodePool",
			Handler:    _MultyResourceService_ReadKubernetesNodePool_Handler,
		},
		{
			MethodName: "UpdateKubernetesNodePool",
			Handler:    _MultyResourceService_UpdateKubernetesNodePool_Handler,
		},
		{
			MethodName: "DeleteKubernetesNodePool",
			Handler:    _MultyResourceService_DeleteKubernetesNodePool_Handler,
		},
		{
			MethodName: "CreateVault",
			Handler:    _MultyResourceService_CreateVault_Handler,
		},
		{
			MethodName: "ReadVault",
			Handler:    _MultyResourceService_ReadVault_Handler,
		},
		{
			MethodName: "UpdateVault",
			Handler:    _MultyResourceService_UpdateVault_Handler,
		},
		{
			MethodName: "DeleteVault",
			Handler:    _MultyResourceService_DeleteVault_Handler,
		},
		{
			MethodName: "CreateVaultAccessPolicy",
			Handler:    _MultyResourceService_CreateVaultAccessPolicy_Handler,
		},
		{
			MethodName: "ReadVaultAccessPolicy",
			Handler:    _MultyResourceService_ReadVaultAccessPolicy_Handler,
		},
		{
			MethodName: "UpdateVaultAccessPolicy",
			Handler:    _MultyResourceService_UpdateVaultAccessPolicy_Handler,
		},
		{
			MethodName: "DeleteVaultAccessPolicy",
			Handler:    _MultyResourceService_DeleteVaultAccessPolicy_Handler,
		},
		{
			MethodName: "CreateVaultSecret",
			Handler:    _MultyResourceService_CreateVaultSecret_Handler,
		},
		{
			MethodName: "ReadVaultSecret",
			Handler:    _MultyResourceService_ReadVaultSecret_Handler,
		},
		{
			MethodName: "UpdateVaultSecret",
			Handler:    _MultyResourceService_UpdateVaultSecret_Handler,
		},
		{
			MethodName: "DeleteVaultSecret",
			Handler:    _MultyResourceService_DeleteVaultSecret_Handler,
		},
		{
			MethodName: "CreateVirtualMachine",
			Handler:    _MultyResourceService_CreateVirtualMachine_Handler,
		},
		{
			MethodName: "ReadVirtualMachine",
			Handler:    _MultyResourceService_ReadVirtualMachine_Handler,
		},
		{
			MethodName: "UpdateVirtualMachine",
			Handler:    _MultyResourceService_UpdateVirtualMachine_Handler,
		},
		{
			MethodName: "DeleteVirtualMachine",
			Handler:    _MultyResourceService_DeleteVirtualMachine_Handler,
		},
		{
			MethodName: "RefreshState",
			Handler:    _MultyResourceService_RefreshState_Handler,
		},
		{
			MethodName: "ListResources",
			Handler:    _MultyResourceService_ListResources_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _MultyResourceService_DeleteResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/multy_service.proto",
}

// MultyUserServiceClient is the client API for MultyUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultyUserServiceClient interface {
	RegisterUser(ctx context.Context, in *userpb.RegisterUserRequest, opts ...grpc.CallOption) (*userpb.User, error)
}

type multyUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMultyUserServiceClient(cc grpc.ClientConnInterface) MultyUserServiceClient {
	return &multyUserServiceClient{cc}
}

func (c *multyUserServiceClient) RegisterUser(ctx context.Context, in *userpb.RegisterUserRequest, opts ...grpc.CallOption) (*userpb.User, error) {
	out := new(userpb.User)
	err := c.cc.Invoke(ctx, "/dev.multy.MultyUserService/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MultyUserServiceServer is the server API for MultyUserService service.
// All implementations must embed UnimplementedMultyUserServiceServer
// for forward compatibility
type MultyUserServiceServer interface {
	RegisterUser(context.Context, *userpb.RegisterUserRequest) (*userpb.User, error)
	mustEmbedUnimplementedMultyUserServiceServer()
}

// UnimplementedMultyUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMultyUserServiceServer struct {
}

func (UnimplementedMultyUserServiceServer) RegisterUser(context.Context, *userpb.RegisterUserRequest) (*userpb.User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedMultyUserServiceServer) mustEmbedUnimplementedMultyUserServiceServer() {}

// UnsafeMultyUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultyUserServiceServer will
// result in compilation errors.
type UnsafeMultyUserServiceServer interface {
	mustEmbedUnimplementedMultyUserServiceServer()
}

func RegisterMultyUserServiceServer(s grpc.ServiceRegistrar, srv MultyUserServiceServer) {
	s.RegisterService(&MultyUserService_ServiceDesc, srv)
}

func _MultyUserService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(userpb.RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultyUserServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.multy.MultyUserService/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultyUserServiceServer).RegisterUser(ctx, req.(*userpb.RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MultyUserService_ServiceDesc is the grpc.ServiceDesc for MultyUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MultyUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dev.multy.MultyUserService",
	HandlerType: (*MultyUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _MultyUserService_RegisterUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/multy_service.proto",
}
